{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ProgressBar.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\nvar isRTL = I18nManager.isRTL;\n\nvar ProgressBar = function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  function ProgressBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProgressBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      width: 0,\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(0)\n    };\n    _this.indeterminateAnimation = null;\n\n    _this.onLayout = function (event) {\n      var visible = _this.props.visible;\n      var previousWidth = _this.state.width;\n\n      _this.setState({\n        width: event.nativeEvent.layout.width\n      }, function () {\n        if (visible && previousWidth === 0) {\n          _this.startAnimation();\n        }\n      });\n    };\n\n    _this.startAnimation = function () {\n      var _this$props = _this.props,\n          indeterminate = _this$props.indeterminate,\n          progress = _this$props.progress;\n      var _this$state = _this.state,\n          fade = _this$state.fade,\n          timer = _this$state.timer;\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 1,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n\n      if (indeterminate) {\n        if (!_this.indeterminateAnimation) {\n          _this.indeterminateAnimation = Animated.timing(timer, {\n            duration: INDETERMINATE_DURATION,\n            toValue: 1,\n            useNativeDriver: Platform.OS !== 'web',\n            isInteraction: false\n          });\n        }\n\n        timer.setValue(0);\n        Animated.loop(_this.indeterminateAnimation).start();\n      } else {\n        Animated.timing(timer, {\n          duration: 200,\n          toValue: progress ? progress : 0,\n          useNativeDriver: true,\n          isInteraction: false\n        }).start();\n      }\n    };\n\n    _this.stopAnimation = function () {\n      var fade = _this.state.fade;\n\n      if (_this.indeterminateAnimation) {\n        _this.indeterminateAnimation.stop();\n      }\n\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          visible = _this$props2.visible,\n          progress = _this$props2.progress;\n\n      if (progress !== prevProps.progress || visible !== prevProps.visible) {\n        if (visible) {\n          this.startAnimation();\n        } else {\n          this.stopAnimation();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          color = _this$props3.color,\n          indeterminate = _this$props3.indeterminate,\n          style = _this$props3.style,\n          theme = _this$props3.theme;\n      var _this$state2 = this.state,\n          fade = _this$state2.fade,\n          timer = _this$state2.timer,\n          width = _this$state2.width;\n      var tintColor = color || theme.colors.primary;\n      var trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n      return React.createElement(View, {\n        onLayout: this.onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.container, {\n          backgroundColor: trackTintColor,\n          opacity: fade\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.progressBar, {\n          backgroundColor: tintColor,\n          width: width,\n          transform: [{\n            translateX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n            })\n          }, {\n            scaleX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [0.0001, 1]\n            })\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      })));\n    }\n  }]);\n\n  return ProgressBar;\n}(React.Component);\n\nProgressBar.defaultProps = {\n  visible: true,\n  progress: 0\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"mappings":"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","names":["React","setColor","withTheme","INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","state","width","timer","Animated","Value","fade","indeterminateAnimation","onLayout","event","visible","_this","props","previousWidth","setState","nativeEvent","layout","startAnimation","indeterminate","progress","timing","duration","toValue","useNativeDriver","isInteraction","start","Platform","OS","setValue","loop","stopAnimation","stop","prevProps","color","style","theme","tintColor","colors","primary","trackTintColor","alpha","rgb","string","View","__source","fileName","lineNumber","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","Component","defaultProps","StyleSheet","create","height","overflow","flex"],"sources":["ProgressBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this.startAnimation();\n      } else {\n        this.stopAnimation();\n      }\n    }\n  }\n\n  private onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this.startAnimation();\n      }\n    });\n  };\n\n  private startAnimation = () => {\n    const { indeterminate, progress } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  };\n\n  private stopAnimation = () => {\n    const { fade } = this.state;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  };\n\n  render() {\n    const { color, indeterminate, style, theme } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor)\n      .alpha(0.38)\n      .rgb()\n      .string();\n\n    return (\n      <View onLayout={this.onLayout}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}