{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListAccordion.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\n\nvar ListAccordion = function (_React$Component) {\n  _inherits(ListAccordion, _React$Component);\n\n  function ListAccordion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expanded: _this.props.expanded || false\n    };\n\n    _this.handlePress = function () {\n      _this.props.onPress && _this.props.onPress();\n\n      if (_this.props.expanded === undefined) {\n        _this.setState(function (state) {\n          return {\n            expanded: !state.expanded\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          titleStyle = _this$props.titleStyle,\n          descriptionStyle = _this$props.descriptionStyle,\n          titleNumberOfLines = _this$props.titleNumberOfLines,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines,\n          style = _this$props.style,\n          id = _this$props.id;\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      var expandedInternal = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n      return React.createElement(ListAccordionGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        }\n      }, function (groupContext) {\n        if (groupContext !== null && !id) {\n          throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n        }\n\n        var expanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n        var handlePress = groupContext && id !== undefined ? function () {\n          return groupContext.onAccordionPress(id);\n        } : _this2.handlePress;\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          }\n        }, React.createElement(TouchableRipple, {\n          style: [styles.container, style],\n          onPress: handlePress,\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          }\n        }, React.createElement(View, {\n          style: styles.row,\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          }\n        }, left ? left({\n          color: expanded ? theme.colors.primary : descriptionColor\n        }) : null, React.createElement(View, {\n          style: [styles.item, styles.content],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          }\n        }, React.createElement(Text, {\n          numberOfLines: titleNumberOfLines,\n          style: [styles.title, {\n            color: expanded ? theme.colors.primary : titleColor\n          }, titleStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          }\n        }, title), description && React.createElement(Text, {\n          numberOfLines: descriptionNumberOfLines,\n          style: [styles.description, {\n            color: descriptionColor\n          }, descriptionStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          }\n        }, description)), React.createElement(View, {\n          style: [styles.item, description ? styles.multiline : undefined],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          }\n        }, React.createElement(MaterialCommunityIcon, {\n          name: expanded ? 'chevron-up' : 'chevron-down',\n          color: titleColor,\n          size: 24,\n          direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          }\n        })))), expanded ? React.Children.map(children, function (child) {\n          if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n            return React.cloneElement(child, {\n              style: [styles.child, child.props.style]\n            });\n          }\n\n          return child;\n        }) : null);\n      });\n    }\n  }]);\n\n  return ListAccordion;\n}(React.Component);\n\nListAccordion.displayName = 'List.Accordion';\nListAccordion.defaultProps = {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"mappings":"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","names":["color","React","TouchableRipple","MaterialCommunityIcon","Text","withTheme","ListAccordionGroupContext","ListAccordion","state","expanded","_this","props","handlePress","onPress","undefined","setState","left","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","Consumer","__source","fileName","lineNumber","groupContext","Error","expandedId","onAccordionPress","_this2","View","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","row","pointerEvents","primary","item","content","numberOfLines","multiline","name","size","direction","I18nManager","isRTL","Children","map","isValidElement","child","right","cloneElement","Component","displayName","defaultProps","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"sources":["ListAccordion.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n              >\n                <View style={styles.row} pointerEvents=\"none\">\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    <Text\n                      numberOfLines={titleNumberOfLines}\n                      style={[\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ]}\n                    >\n                      {title}\n                    </Text>\n                    {description && (\n                      <Text\n                        numberOfLines={descriptionNumberOfLines}\n                        style={[\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ]}\n                      >\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <View\n                    style={[\n                      styles.item,\n                      description ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <MaterialCommunityIcon\n                      name={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                      direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, child => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}