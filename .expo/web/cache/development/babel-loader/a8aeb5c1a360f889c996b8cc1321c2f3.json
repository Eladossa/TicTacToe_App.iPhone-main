{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Board from \"./components/Board\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Statistics from \"./components/Statistics\";\nimport { mainApp } from \"./styles/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      playerTurn = _useState2[0],\n      changeTurn = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      end = _useState4[0],\n      endGame = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modal = _useState6[0],\n      toggleModal = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      result = _useState8[0],\n      setResult = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      turns = _useState10[0],\n      setTurn = _useState10[1];\n\n  var togglePlayer = function togglePlayer() {\n    return changeTurn(!playerTurn);\n  };\n\n  var toggleGame = function toggleGame() {\n    return endGame(!end);\n  };\n\n  var triggerModal = function triggerModal() {\n    return toggleModal(!modal);\n  };\n\n  var newGame = function newGame() {\n    setTurn({});\n    endGame(false);\n    toggleModal(false);\n    changeTurn(true);\n  };\n\n  var finishGame = function finishGame() {\n    endGame();\n    triggerModal();\n  };\n\n  function checkWinner() {\n    var winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (var i = 0; i < winningCombos.length; i++) {\n      var _winningCombos$i = _slicedToArray(winningCombos[i], 3),\n          a = _winningCombos$i[0],\n          b = _winningCombos$i[1],\n          c = _winningCombos$i[2];\n\n      if (turns[a] === turns[b] && turns[b] === turns[c] && a in turns && b in turns && c in turns) {\n        setResult(playerTurn ? 'Congratulations Player 1!' : 'Nice going Player 2!');\n        finishGame();\n      }\n    }\n\n    if (Object.keys(turns).length === 9) {\n      setResult('Tie Game!');\n      finishGame();\n    }\n  }\n\n  function checkTurn(value) {\n    var tempTurns = turns;\n    tempTurns[value] = playerTurn ? 'X' : 'O';\n    setTurn(_objectSpread({}, tempTurns));\n    checkWinner();\n    togglePlayer();\n  }\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      initialRouteNme: \"\",\n      children: _jsx(Stack.Screen, {\n        name: \"Statistics\",\n        component: Statistics\n      })\n    })\n  });\n}\nvar Stack = createNativeStackNavigator();","map":{"version":3,"names":["React","useState","Board","NavigationContainer","createNativeStackNavigator","Statistics","mainApp","App","navigation","playerTurn","changeTurn","end","endGame","modal","toggleModal","result","setResult","turns","setTurn","togglePlayer","toggleGame","triggerModal","newGame","finishGame","checkWinner","winningCombos","i","length","a","b","c","Object","keys","checkTurn","value","tempTurns","Stack"],"sources":["C:/Users/Elad Hatan/Desktop/TicTacToe_App/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Text, View, Modal, TouchableOpacity, Alert } from 'react-native';\nimport Board from './components/Board';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Statistics from './components/Statistics';\nimport { mainApp } from './styles/styles';\n\nexport default function App({ navigation }) {\n  //Player, game, and modal states\n  const [playerTurn, changeTurn] = useState(true);\n  const [end, endGame] = useState(false);\n  const [modal, toggleModal] = useState(false);\n\n  //Result message for winner and tie games\n  const [result, setResult] = useState('');\n\n  //Turns dictionary to store turns taken\n  const [turns, setTurn] = useState({});\n\n  //Hook toggles for components to render and switch players\n  const togglePlayer = () => changeTurn(!playerTurn);\n  const toggleGame = () => endGame(!end);\n  const triggerModal = () => toggleModal(!modal);\n\n  //Hook to set a new game\n  const newGame = () => {\n    setTurn({});\n    endGame(false);\n    toggleModal(false);\n    changeTurn(true);\n  };\n\n  //Hook to end the game and render components needed\n  const finishGame = () => {\n    endGame();\n    triggerModal();\n  };\n\n  function checkWinner() {\n    const winningCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < winningCombos.length; i++) {\n      const [a, b, c] = winningCombos[i];\n      if (\n        turns[a] === turns[b] &&\n        turns[b] === turns[c] &&\n        a in turns &&\n        b in turns &&\n        c in turns\n      ) {\n        //Winner is determined\n        setResult(\n          playerTurn ? 'Congratulations Player 1!' : 'Nice going Player 2!'\n        );\n        finishGame();\n      }\n    }\n\n    //when the board is full with no winner, it results in a tie\n    if (Object.keys(turns).length === 9) {\n      setResult('Tie Game!');\n      finishGame();\n    }\n  }\n\n  function checkTurn(value) {\n    const tempTurns = turns;\n    tempTurns[value] = playerTurn ? 'X' : 'O';\n\n    //Sets the turn state with the new value added\n    setTurn({ ...tempTurns });\n\n    //Here we call a function to check if the game is won abd change players\n    checkWinner();\n    togglePlayer();\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteNme=''>\n        <Stack.Screen name='Statistics' component={Statistics} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}