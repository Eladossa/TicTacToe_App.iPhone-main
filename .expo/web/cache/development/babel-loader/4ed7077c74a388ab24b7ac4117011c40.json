{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Board from \"./Board\";\nimport { mainApp } from \"../styles/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar URL = 'http://www.whatyouwant.somee.com/api/Games/SetGameResults';\nLogBox.ignoreAllLogs();\nexport default function Game(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    p1: '',\n    p2: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameResult = _useState2[0],\n      setGameResult = _useState2[1];\n\n  useEffect(function () {\n    console.log('useEffect');\n\n    if (gameResult.p1 && gameResult.p2 !== '') {\n      console.log(typeof gameResult.p1);\n      console.log('calling postResulttoDB function');\n      postResulttoDB();\n    }\n  }, [gameResult]);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modal = _useState4[0],\n      toggleModal = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      playerTurn = _useState6[0],\n      changeTurn = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      end = _useState8[0],\n      endGame = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      result = _useState10[0],\n      setResult = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      turns = _useState12[0],\n      setTurn = _useState12[1];\n\n  var togglePlayer = function togglePlayer() {\n    return changeTurn(!playerTurn);\n  };\n\n  var toggleGame = function toggleGame() {\n    return endGame(!end);\n  };\n\n  var triggerModal = function triggerModal() {\n    return toggleModal(!modal);\n  };\n\n  function checkWinner() {\n    var winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (var i = 0; i < winningCombos.length; i++) {\n      var _winningCombos$i = _slicedToArray(winningCombos[i], 3),\n          a = _winningCombos$i[0],\n          b = _winningCombos$i[1],\n          c = _winningCombos$i[2];\n\n      if (turns[a] === turns[b] && turns[b] === turns[c] && a in turns && b in turns && c in turns) {\n        playerTurn ? setGameResult({\n          p1: 1,\n          p2: 0\n        }) : setGameResult({\n          p1: 0,\n          p2: 1\n        });\n        setResult(playerTurn ? 'Congratulations Player 1!' : 'Nice going Player 2!');\n        finishGame();\n      }\n    }\n\n    if (Object.keys(turns).length === 9) {\n      setResult('Tie Game!');\n      setGameResult({\n        p1: 0,\n        p2: 0\n      });\n      finishGame();\n    }\n  }\n\n  var postResulttoDB = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        console.log('starting postResulttoDB function');\n        var fetchResponse = yield fetch(URL, {\n          method: 'POST',\n          body: JSON.stringify({\n            user1: gameResult.p1,\n            user2: gameResult.p2\n          })\n        });\n        var data = yield fetchResponse.json();\n        return data;\n      } catch (err) {\n        return console.log('error catch', err);\n      }\n    });\n\n    return function postResulttoDB() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function checkTurn(value) {\n    var tempTurns = turns;\n    tempTurns[value] = playerTurn ? 'X' : 'O';\n    setTurn(_objectSpread({}, tempTurns));\n    checkWinner();\n    togglePlayer();\n  }\n\n  var finishGame = function finishGame() {\n    console.log('finishGame');\n    toggleGame();\n    triggerModal();\n  };\n\n  var newGame = function newGame() {\n    console.log('newGame activated');\n    setTurn({});\n    endGame(false);\n    toggleModal(false);\n    changeTurn(true);\n  };\n\n  function onPressHandler() {\n    navigation.replace('Statics Screen');\n  }\n\n  return _jsxs(View, {\n    children: [_jsxs(TouchableOpacity, {\n      style: mainApp.showStatsButton,\n      onPress: function onPress() {\n        onPressHandler();\n      },\n      children: [' ', _jsx(Text, {\n        style: mainApp.whiteButtonText,\n        children: \"Show Statistics\"\n      })]\n    }), _jsxs(View, {\n      style: mainApp.container,\n      children: [_jsx(Text, {\n        style: mainApp.paragraph,\n        children: \"Let's play Tic-Tac-Toe\"\n      }), _jsx(Board, {\n        turns: turns,\n        checkTurn: checkTurn\n      }), modal && navigation.navigate('Result Modal', {\n        result: result,\n        newGame: newGame\n      }), _jsxs(View, {\n        style: mainApp.legend,\n        children: [_jsx(Text, {\n          style: mainApp.subheader,\n          children: \"X - Player 1\"\n        }), _jsx(Text, {\n          style: mainApp.subheader,\n          children: \"O - Player 2\"\n        })]\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","Board","mainApp","URL","LogBox","ignoreAllLogs","Game","navigation","p1","p2","gameResult","setGameResult","console","log","postResulttoDB","modal","toggleModal","playerTurn","changeTurn","end","endGame","result","setResult","turns","setTurn","togglePlayer","toggleGame","triggerModal","checkWinner","winningCombos","i","length","a","b","c","finishGame","Object","keys","fetchResponse","fetch","method","body","JSON","stringify","user1","user2","data","json","err","checkTurn","value","tempTurns","newGame","onPressHandler","replace","showStatsButton","whiteButtonText","container","paragraph","navigate","legend","subheader"],"sources":["C:/Users/Elad Hatan/Desktop/TicTacToe_App.iPhone-main/screens/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Text, View, LogBox, TouchableOpacity } from 'react-native';\r\nimport Board from './Board';\r\nimport { mainApp } from '../styles/styles';\r\nconst URL = 'http://www.whatyouwant.somee.com/api/Games/SetGameResults';\r\n\r\nLogBox.ignoreAllLogs();\r\n\r\nexport default function Game({ navigation }) {\r\n  const [gameResult, setGameResult] = useState({\r\n    p1: '',\r\n    p2: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect');\r\n    if (gameResult.p1 && gameResult.p2 !== '') {\r\n      console.log(typeof gameResult.p1);\r\n      console.log('calling postResulttoDB function');\r\n      postResulttoDB();\r\n    }\r\n  }, [gameResult]);\r\n\r\n  const [modal, toggleModal] = useState(false);\r\n\r\n  //Player, game, and modal states\r\n  const [playerTurn, changeTurn] = useState(true);\r\n  const [end, endGame] = useState(false);\r\n\r\n  //Result message for winner and tie games\r\n  const [result, setResult] = useState('');\r\n\r\n  //Turns dictionary to store turns taken\r\n  const [turns, setTurn] = useState({});\r\n\r\n  //Hook toggles for components to render and switch players\r\n  const togglePlayer = () => changeTurn(!playerTurn);\r\n  const toggleGame = () => endGame(!end);\r\n  const triggerModal = () => toggleModal(!modal);\r\n\r\n  function checkWinner() {\r\n    const winningCombos = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < winningCombos.length; i++) {\r\n      const [a, b, c] = winningCombos[i];\r\n      if (\r\n        turns[a] === turns[b] &&\r\n        turns[b] === turns[c] &&\r\n        a in turns &&\r\n        b in turns &&\r\n        c in turns\r\n      ) {\r\n        //Winner is determined\r\n        playerTurn\r\n          ? setGameResult({ p1: 1, p2: 0 })\r\n          : setGameResult({ p1: 0, p2: 1 });\r\n        setResult(\r\n          playerTurn ? 'Congratulations Player 1!' : 'Nice going Player 2!'\r\n        );\r\n        finishGame();\r\n      }\r\n    }\r\n\r\n    //when the board is full with no winner, it results in a tie\r\n    if (Object.keys(turns).length === 9) {\r\n      setResult('Tie Game!');\r\n      setGameResult({ p1: 0, p2: 0 });\r\n      finishGame();\r\n    }\r\n  }\r\n  const postResulttoDB = async () => {\r\n    try {\r\n      console.log('starting postResulttoDB function');\r\n      const fetchResponse = await fetch(URL, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          user1: gameResult.p1,\r\n          user2: gameResult.p2,\r\n        }),\r\n      });\r\n      const data = await fetchResponse.json();\r\n      return data;\r\n    } catch (err) {\r\n      return console.log('error catch', err);\r\n    }\r\n\r\n    // .then((response) => {\r\n    //   if (response.ok) {\r\n    //     return response.json();\r\n    //   } else {\r\n    //     throw new Error('Something went wrong');\r\n    //   }\r\n    // })\r\n    // .catch((err) => {\r\n    //   console.log('error catch', err);\r\n    // });\r\n  };\r\n\r\n  function checkTurn(value) {\r\n    const tempTurns = turns;\r\n    tempTurns[value] = playerTurn ? 'X' : 'O';\r\n\r\n    //Sets the turn state with the new value added\r\n    setTurn({ ...tempTurns });\r\n\r\n    //Here we call a function to check if the game is won abd change players\r\n    checkWinner();\r\n    togglePlayer();\r\n  }\r\n\r\n  //Hook to end the game and render components needed\r\n  const finishGame = () => {\r\n    console.log('finishGame');\r\n    toggleGame();\r\n    triggerModal();\r\n  };\r\n\r\n  //Hook to set a new game\r\n  const newGame = () => {\r\n    console.log('newGame activated');\r\n    setTurn({});\r\n    endGame(false);\r\n    toggleModal(false);\r\n    changeTurn(true);\r\n  };\r\n  function onPressHandler() {\r\n    navigation.replace('Statics Screen');\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <TouchableOpacity\r\n        style={mainApp.showStatsButton}\r\n        onPress={() => {\r\n          onPressHandler();\r\n        }}\r\n      >\r\n        {' '}\r\n        <Text style={mainApp.whiteButtonText}>Show Statistics</Text>\r\n      </TouchableOpacity>\r\n      <View style={mainApp.container}>\r\n        <Text style={mainApp.paragraph}>Let's play Tic-Tac-Toe</Text>\r\n        <Board turns={turns} checkTurn={checkTurn} />\r\n        {modal &&\r\n          navigation.navigate('Result Modal', {\r\n            result: result,\r\n            newGame: newGame,\r\n          })}\r\n        <View style={mainApp.legend}>\r\n          <Text style={mainApp.subheader}>X - Player 1</Text>\r\n          <Text style={mainApp.subheader}>O - Player 2</Text>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}