{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonAndroid.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  _inherits(RadioButtonAndroid, _React$Component);\n\n  function RadioButtonAndroid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      borderAnim: new Animated.Value(BORDER_WIDTH),\n      radioAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n        Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n        Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          value = _this$props.value,\n          status = _this$props.status,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\"]);\n\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, radioColor;\n      return React.createElement(RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        }\n      }, function (context) {\n        var checked = isChecked({\n          contextValue: context == null ? void 0 : context.value,\n          status: status,\n          value: value\n        }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return React.createElement(TouchableRipple, _extends({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            handlePress({\n              onPress: onPress,\n              onValueChange: context == null ? void 0 : context.onValueChange,\n              value: value\n            });\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : [],\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          }\n        }), React.createElement(Animated.View, {\n          style: [styles.radio, {\n            borderColor: radioColor,\n            borderWidth: _this2.state.borderAnim\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          }\n        }, checked ? React.createElement(View, {\n          style: [StyleSheet.absoluteFill, styles.radioContainer],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.dot, {\n            backgroundColor: radioColor,\n            transform: [{\n              scale: _this2.state.radioAnim\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          }\n        })) : null));\n      });\n    }\n  }]);\n\n  return RadioButtonAndroid;\n}(React.Component);\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid);\nexport { RadioButtonAndroid };","map":{"version":3,"mappings":"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","names":["React","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","state","borderAnim","Animated","Value","radioAnim","prevProps","status","props","setValue","timing","toValue","duration","start","disabled","onPress","theme","value","rest","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","Consumer","__source","fileName","lineNumber","context","checked","contextValue","fade","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","style","styles","container","View","radio","borderColor","borderWidth","_this2","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"sources":["RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}