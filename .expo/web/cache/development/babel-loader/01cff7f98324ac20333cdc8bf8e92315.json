{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/CheckboxAndroid.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nvar ANIMATION_DURATION = 100;\n\nvar CheckboxAndroid = function (_React$Component) {\n  _inherits(CheckboxAndroid, _React$Component);\n\n  function CheckboxAndroid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CheckboxAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckboxAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      scaleAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(CheckboxAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var checked = this.props.status === 'checked';\n      var animation = this.props.theme.animation;\n      Animated.sequence([Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0\n      }), Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? ANIMATION_DURATION * animation.scale : ANIMATION_DURATION * animation.scale * 1.75\n      })]).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, checkboxColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        checkboxColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        checkboxColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      var borderWidth = this.state.scaleAnim.interpolate({\n        inputRange: [0.8, 1],\n        outputRange: [7, 0]\n      });\n      var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        }\n      }), React.createElement(Animated.View, {\n        style: {\n          transform: [{\n            scale: this.state.scaleAnim\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }, React.createElement(MaterialCommunityIcon, {\n        allowFontScaling: false,\n        name: icon,\n        size: 24,\n        color: checkboxColor,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        }\n      }), React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.fillContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.fill, {\n          borderColor: checkboxColor\n        }, {\n          borderWidth: borderWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        }\n      }))));\n    }\n  }]);\n\n  return CheckboxAndroid;\n}(React.Component);\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid);\nexport { CheckboxAndroid };","map":{"version":3,"mappings":"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","names":["React","color","MaterialCommunityIcon","TouchableRipple","withTheme","ANIMATION_DURATION","CheckboxAndroid","state","scaleAnim","Animated","Value","prevProps","status","props","checked","animation","theme","sequence","timing","toValue","duration","scale","start","disabled","onPress","rest","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","style","styles","container","__source","fileName","lineNumber","View","transform","allowFontScaling","name","size","direction","I18nManager","isRTL","StyleSheet","absoluteFill","fillContainer","fill","borderColor","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"sources":["CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, I18nManager } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkboxColor}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}