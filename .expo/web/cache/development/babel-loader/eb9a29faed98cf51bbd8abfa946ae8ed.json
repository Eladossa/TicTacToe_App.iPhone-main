{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInputOutlined.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder } from \"./helpers\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextInputOutlined).apply(this, arguments));\n  }\n\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor, containerStyle;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n      if (height && typeof height !== 'number') console.warn('Currently we support only numbers in height prop');\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread({}, paddingSettings, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = interpolatePlaceholder(parentState.labeled, hasActiveOutline);\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      return React.createElement(View, {\n        style: [containerStyle, viewStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        }\n      }, React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        }\n      }, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        }\n      }), React.createElement(View, {\n        style: {\n          paddingTop: LABEL_PADDING_TOP,\n          paddingBottom: 0,\n          minHeight: minHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        }\n      }), render == null ? void 0 : render(_objectSpread({}, rest, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread({}, font, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        })]\n      })))));\n    }\n  }]);\n\n  return TextInputOutlined;\n}(React.Component);\n\nTextInputOutlined.defaultProps = {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      }\n    }));\n  }\n};\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref2) {\n  var theme = _ref2.theme,\n      hasActiveOutline = _ref2.hasActiveOutline,\n      activeColor = _ref2.activeColor,\n      outlineColor = _ref2.outlineColor,\n      backgroundColor = _ref2.backgroundColor;\n  return React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","props","disabled","editable","label","error","selectionColor","underlineColor","dense","style","theme","render","multiline","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","height","backgroundColor","background","viewStyle","inputTextColor","activeColor","outlineColor","placeholderColor","errorColor","containerStyle","text","alpha","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","labelProps","placeholderStyle","wiggleOffsetX","minHeight","View","__source","fileName","lineNumber","Outline","paddingTop","paddingBottom","labelBackground","ref","placeholderTextColor","underlineColorAndroid","input","textAlignVertical","Component","defaultProps","NativeTextInput","pointerEvents","outline","borderRadius","roundness","borderWidth","borderColor","create","position","left","paddingHorizontal","right","top","bottom","flexGrow","margin","textAlign","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { RenderProps, ChildTextInputProps } from './types';\nimport { Theme } from '../../types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n} from './helpers';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor,\n      activeColor,\n      outlineColor,\n      placeholderColor,\n      errorColor,\n      containerStyle;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number')\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = interpolatePlaceholder(\n      parentState.labeled,\n      hasActiveOutline\n    );\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n    };\n\n    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        {/* \n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android \n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                },\n              ],\n            } as RenderProps)}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}