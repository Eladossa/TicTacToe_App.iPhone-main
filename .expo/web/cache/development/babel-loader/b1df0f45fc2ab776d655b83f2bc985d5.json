{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/FAB/FAB.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"../ActivityIndicator\";\nimport FABGroup from \"./FABGroup\";\nimport Surface from \"../Surface\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\n\nvar FAB = function (_React$Component) {\n  _inherits(FAB, _React$Component);\n\n  function FAB() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FAB);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FAB)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visibility: new Animated.Value(_this.props.visible ? 1 : 0)\n    };\n    return _this;\n  }\n\n  _createClass(FAB, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.visible === prevProps.visible) {\n        return;\n      }\n\n      if (this.props.visible) {\n        Animated.timing(this.state.visibility, {\n          toValue: 1,\n          duration: 200 * scale,\n          useNativeDriver: true\n        }).start();\n      } else {\n        Animated.timing(this.state.visibility, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          small = _this$props.small,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          _this$props$accessibi = _this$props.accessibilityLabel,\n          accessibilityLabel = _this$props$accessibi === void 0 ? label : _this$props$accessibi,\n          customColor = _this$props.color,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          visible = _this$props.visible,\n          loading = _this$props.loading,\n          rest = _objectWithoutProperties(_this$props, [\"small\", \"icon\", \"label\", \"accessibilityLabel\", \"color\", \"disabled\", \"onPress\", \"theme\", \"style\", \"visible\", \"loading\"]);\n\n      var visibility = this.state.visibility;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref$backgroundColor;\n\n      var foregroundColor;\n\n      if (typeof customColor !== 'undefined') {\n        foregroundColor = customColor;\n      } else if (disabled) {\n        foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else {\n        foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n      }\n\n      var rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n      return React.createElement(Surface, _extends({}, rest, {\n        style: [{\n          backgroundColor: backgroundColor,\n          opacity: visibility,\n          transform: [{\n            scale: visibility\n          }]\n        }, styles.container, disabled && styles.disabled, style],\n        pointerEvents: visible ? 'auto' : 'none',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        onPress: onPress,\n        rippleColor: rippleColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        style: styles.touchable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(View, {\n        style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        }\n      }, icon && loading !== true ? React.createElement(CrossFadeIcon, {\n        source: icon,\n        size: 24,\n        color: foregroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        }\n      }) : null, loading ? React.createElement(ActivityIndicator, {\n        size: 18,\n        color: foregroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        }\n      }) : null, label ? React.createElement(Text, {\n        style: [styles.label, _objectSpread({\n          color: foregroundColor\n        }, theme.fonts.medium)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        }\n      }, label.toUpperCase()) : null)));\n    }\n  }]);\n\n  return FAB;\n}(React.Component);\n\nFAB.Group = FABGroup;\nFAB.defaultProps = {\n  visible: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  disabled: {\n    elevation: 0\n  }\n});\nexport default withTheme(FAB);","map":{"version":3,"mappings":"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","names":["color","React","ActivityIndicator","FABGroup","Surface","CrossFadeIcon","Text","TouchableRipple","black","white","withTheme","FAB","state","visibility","Animated","Value","_this","props","visible","prevProps","scale","theme","animation","timing","toValue","duration","useNativeDriver","start","small","icon","label","accessibilityLabel","customColor","disabled","onPress","style","loading","rest","disabledColor","dark","alpha","rgb","string","StyleSheet","flatten","backgroundColor","colors","accent","foregroundColor","isLight","rippleColor","opacity","transform","styles","container","pointerEvents","__source","fileName","lineNumber","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","touchable","View","content","extended","standard","source","size","fonts","medium","toUpperCase","Component","Group","defaultProps","create","borderRadius","elevation","height","width","paddingHorizontal","flexDirection","alignItems","justifyContent","marginHorizontal"],"sources":["FAB.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { Animated, View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport FABGroup, { FABGroup as _FABGroup } from './FABGroup';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\nimport { IconSource } from './../Icon';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  visibility: Animated.Value;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nclass FAB extends React.Component<Props, State> {\n  // @component ./FABGroup.tsx\n  static Group = FABGroup;\n\n  static defaultProps = {\n    visible: true,\n  };\n\n  state = {\n    visibility: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { scale } = this.props.theme.animation;\n    if (this.props.visible === prevProps.visible) {\n      return;\n    }\n\n    if (this.props.visible) {\n      Animated.timing(this.state.visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(this.state.visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      small,\n      icon,\n      label,\n      accessibilityLabel = label,\n      color: customColor,\n      disabled,\n      onPress,\n      theme,\n      style,\n      visible,\n      loading,\n      ...rest\n    } = this.props;\n    const { visibility } = this.state;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n      StyleSheet.flatten(style) || {};\n\n    let foregroundColor;\n\n    if (typeof customColor !== 'undefined') {\n      foregroundColor = customColor;\n    } else if (disabled) {\n      foregroundColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else {\n      foregroundColor = !color(backgroundColor).isLight()\n        ? white\n        : 'rgba(0, 0, 0, .54)';\n    }\n\n    const rippleColor = color(foregroundColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        {...rest}\n        style={\n          [\n            {\n              backgroundColor,\n              opacity: visibility,\n              transform: [\n                {\n                  scale: visibility,\n                },\n              ],\n            },\n            styles.container,\n            disabled && styles.disabled,\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n      >\n        <TouchableRipple\n          borderless\n          onPress={onPress}\n          rippleColor={rippleColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          style={styles.touchable}\n        >\n          <View\n            style={[\n              styles.content,\n              label ? styles.extended : small ? styles.small : styles.standard,\n            ]}\n            pointerEvents=\"none\"\n          >\n            {icon && loading !== true ? (\n              <CrossFadeIcon source={icon} size={24} color={foregroundColor} />\n            ) : null}\n            {loading ? (\n              <ActivityIndicator size={18} color={foregroundColor} />\n            ) : null}\n            {label ? (\n              <Text\n                style={[\n                  styles.label,\n                  { color: foregroundColor, ...theme.fonts.medium },\n                ]}\n              >\n                {label.toUpperCase()}\n              </Text>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n"]},"metadata":{},"sourceType":"module"}