{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Button.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  function Button() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      elevation: new Animated.Value(_this.props.mode === 'contained' ? 2 : 0)\n    };\n\n    _this.handlePressIn = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 8,\n          duration: 200\n        }).start();\n      }\n    };\n\n    _this.handlePressOut = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 2,\n          duration: 150\n        }).start();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          compact = _this$props.compact,\n          mode = _this$props.mode,\n          dark = _this$props.dark,\n          loading = _this$props.loading,\n          icon = _this$props.icon,\n          buttonColor = _this$props.color,\n          children = _this$props.children,\n          uppercase = _this$props.uppercase,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          contentStyle = _this$props.contentStyle,\n          labelStyle = _this$props.labelStyle,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"onPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var font = theme.fonts.medium;\n      var backgroundColor, borderColor, textColor, borderWidth;\n\n      if (mode === 'contained') {\n        if (disabled) {\n          backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n        } else if (buttonColor) {\n          backgroundColor = buttonColor;\n        } else {\n          backgroundColor = colors.primary;\n        }\n      } else {\n        backgroundColor = 'transparent';\n      }\n\n      if (mode === 'outlined') {\n        borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n        borderWidth = StyleSheet.hairlineWidth;\n      } else {\n        borderColor = 'transparent';\n        borderWidth = 0;\n      }\n\n      if (disabled) {\n        textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else if (mode === 'contained') {\n        var isDark;\n\n        if (typeof dark === 'boolean') {\n          isDark = dark;\n        } else {\n          isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n        }\n\n        textColor = isDark ? white : black;\n      } else if (buttonColor) {\n        textColor = buttonColor;\n      } else {\n        textColor = colors.primary;\n      }\n\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      var buttonStyle = {\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        borderWidth: borderWidth,\n        borderRadius: roundness\n      };\n      var touchableStyle = {\n        borderRadius: style ? StyleSheet.flatten(style).borderRadius || roundness : roundness\n      };\n\n      var textStyle = _objectSpread({\n        color: textColor\n      }, font);\n\n      var elevation = disabled || mode !== 'contained' ? 0 : this.state.elevation;\n      return React.createElement(Surface, _extends({}, rest, {\n        style: [styles.button, compact && styles.compact, {\n          elevation: elevation\n        }, buttonStyle, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        disabled: disabled,\n        rippleColor: rippleColor,\n        style: touchableStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        }\n      }, React.createElement(View, {\n        style: [styles.content, contentStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        }\n      }, icon && loading !== true ? React.createElement(View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        }\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 16,\n        color: textColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        }\n      })) : null, loading ? React.createElement(ActivityIndicator, {\n        size: 16,\n        color: textColor,\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        }\n      }) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        }\n      }, children))));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nButton.defaultProps = {\n  mode: 'text',\n  uppercase: true\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"mappings":"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","names":["React","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","state","elevation","Animated","Value","_this","props","mode","handlePressIn","timing","toValue","duration","start","handlePressOut","disabled","compact","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","onPress","style","theme","contentStyle","labelStyle","rest","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","textStyle","styles","button","__source","fileName","lineNumber","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","View","content","source","size","numberOfLines","label","compactLabel","uppercaseLabel","Component","defaultProps","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  private handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200,\n      }).start();\n    }\n  };\n\n  private handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? StyleSheet.flatten(style).borderRadius || roundness\n        : roundness,\n    };\n    const textStyle = { color: textColor, ...font };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation } as ViewStyle,\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={16} color={textColor} />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={16}\n                color={textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}