{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonIOS.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar RadioButtonIOS = function (_React$Component) {\n  _inherits(RadioButtonIOS, _React$Component);\n\n  function RadioButtonIOS() {\n    _classCallCheck(this, RadioButtonIOS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RadioButtonIOS).apply(this, arguments));\n  }\n\n  _createClass(RadioButtonIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          status = _this$props.status,\n          value = _this$props.value,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\"]);\n\n      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n      var rippleColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      }\n\n      return React.createElement(RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        }\n      }, function (context) {\n        var checked = isChecked({\n          contextValue: context == null ? void 0 : context.value,\n          status: status,\n          value: value\n        }) === 'checked';\n        return React.createElement(TouchableRipple, _extends({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            handlePress({\n              onPress: onPress,\n              value: value,\n              onValueChange: context == null ? void 0 : context.onValueChange\n            });\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : [],\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          }\n        }), React.createElement(View, {\n          style: {\n            opacity: checked ? 1 : 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          }\n        }, React.createElement(MaterialCommunityIcon, {\n          allowFontScaling: false,\n          name: \"check\",\n          size: 24,\n          color: checkedColor,\n          direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          }\n        })));\n      });\n    }\n  }]);\n\n  return RadioButtonIOS;\n}(React.Component);\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\nexport { RadioButtonIOS };","map":{"version":3,"mappings":"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","names":["React","color","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","RadioButtonIOS","props","disabled","onPress","theme","status","value","rest","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","Consumer","__source","fileName","lineNumber","context","checked","contextValue","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","style","styles","container","View","opacity","allowFontScaling","name","size","direction","I18nManager","isRTL","Component","displayName","StyleSheet","create","borderRadius","padding"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, I18nManager } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, status, value, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor: string;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        value,\n                        onValueChange: context?.onValueChange,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <MaterialCommunityIcon\n                  allowFontScaling={false}\n                  name=\"check\"\n                  size={24}\n                  color={checkedColor}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}