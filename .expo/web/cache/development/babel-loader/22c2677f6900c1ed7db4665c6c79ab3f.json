{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Chip.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Chip = function (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  function Chip() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chip)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      elevation: new Animated.Value(0)\n    };\n\n    _this.handlePressIn = function () {\n      Animated.timing(_this.state.elevation, {\n        toValue: 4,\n        duration: 200\n      }).start();\n    };\n\n    _this.handlePressOut = function () {\n      Animated.timing(_this.state.elevation, {\n        toValue: 0,\n        duration: 150\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          avatar = _this$props.avatar,\n          selected = _this$props.selected,\n          disabled = _this$props.disabled,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress,\n          onClose = _this$props.onClose,\n          textStyle = _this$props.textStyle,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          testID = _this$props.testID,\n          selectedColor = _this$props.selectedColor,\n          rest = _objectWithoutProperties(_this$props, [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\"]);\n\n      var dark = theme.dark,\n          colors = theme.colors;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref$backgroundColor,\n          _ref$borderRadius = _ref.borderRadius,\n          borderRadius = _ref$borderRadius === void 0 ? 16 : _ref$borderRadius;\n\n      var borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n      var textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n      var selectedBackgroundColor = (dark ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n      var underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n      var accessibilityTraits = ['button'];\n      var accessibilityStates = [];\n\n      if (selected) {\n        accessibilityTraits.push('selected');\n        accessibilityStates.push('selected');\n      }\n\n      if (disabled) {\n        accessibilityTraits.push('disabled');\n        accessibilityStates.push('disabled');\n      }\n\n      return React.createElement(Surface, _extends({\n        style: [styles.container, {\n          elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor: borderColor,\n          borderRadius: borderRadius\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        style: {\n          borderRadius: borderRadius\n        },\n        onPress: onPress,\n        onLongPress: onLongPress,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        underlayColor: underlayColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: accessibilityTraits,\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: accessibilityStates,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        }\n      }, React.createElement(View, {\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        }\n      }, avatar && !icon ? React.createElement(View, {\n        style: [styles.avatarWrapper, disabled && {\n          opacity: 0.26\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        }\n      }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n        style: [styles.avatar, avatar.props.style]\n      }) : avatar) : null, icon || selected ? React.createElement(View, {\n        style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        }\n      }, React.createElement(Icon, {\n        source: icon || 'check',\n        color: avatar ? white : iconColor,\n        size: 18,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        }\n      })) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.text, _objectSpread({}, theme.fonts.regular, {\n          color: textColor,\n          marginRight: onClose ? 4 : 8,\n          marginLeft: avatar || icon || selected ? 4 : 8\n        }), textStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        }\n      }, children), onClose ? React.createElement(TouchableWithoutFeedback, {\n        onPress: onClose,\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        }\n      }, React.createElement(View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        }\n      }, React.createElement(Icon, {\n        source: \"close-circle\",\n        size: 16,\n        color: iconColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        }\n      }))) : null)));\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\n\nChip.defaultProps = {\n  mode: 'flat',\n  disabled: false,\n  selected: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  icon: {\n    padding: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"mappings":"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","names":["React","color","Icon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","state","elevation","Animated","Value","handlePressIn","timing","_this","toValue","duration","start","handlePressOut","props","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onLongPress","onClose","textStyle","style","theme","testID","selectedColor","rest","dark","colors","StyleSheet","flatten","backgroundColor","surface","borderRadius","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityStates","push","styles","container","Platform","OS","__source","fileName","lineNumber","borderless","delayPressIn","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","View","content","avatarWrapper","opacity","isValidElement","cloneElement","avatarSelected","source","size","numberOfLines","fonts","regular","marginRight","marginLeft","TouchableWithoutFeedback","Component","defaultProps","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityStates: AccessibilityState[] = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}