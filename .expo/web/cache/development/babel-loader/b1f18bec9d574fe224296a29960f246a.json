{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButton.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport ToggleButtonGroup, { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport ToggleButtonRow from \"./ToggleButtonRow\";\nimport { black, white } from \"../../styles/colors\";\n\nvar ToggleButton = function (_React$Component) {\n  _inherits(ToggleButton, _React$Component);\n\n  function ToggleButton() {\n    _classCallCheck(this, ToggleButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToggleButton).apply(this, arguments));\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          theme = _this$props.theme,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          disabled = _this$props.disabled,\n          style = _this$props.style,\n          value = _this$props.value,\n          status = _this$props.status,\n          _onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"]);\n\n      var borderRadius = theme.roundness;\n      return React.createElement(ToggleButtonGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }, function (context) {\n        var backgroundColor;\n        var checked = context && context.value === value || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return React.createElement(IconButton, _extends({\n          borderless: false,\n          icon: icon,\n          onPress: function onPress(e) {\n            if (_onPress) {\n              _onPress(e);\n            }\n\n            if (context) {\n              context.onValueChange(!checked ? value : null);\n            }\n          },\n          size: size,\n          accessibilityLabel: accessibilityLabel,\n          disabled: disabled,\n          style: [styles.content, {\n            backgroundColor: backgroundColor,\n            borderRadius: borderRadius,\n            borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n          }, style]\n        }, rest, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          }\n        }));\n      });\n    }\n  }]);\n\n  return ToggleButton;\n}(React.Component);\n\nToggleButton.Group = ToggleButtonGroup;\nToggleButton.Row = ToggleButtonRow;\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAOA,SAASC,SAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AACA,OAAOC,iBAAP,IACEC,wBADF;AAGA,OAAOC,eAAP;AACA,SAASC,KAAT,EAAgBC,KAAhB;;IA+EMC,Y;;;;;;;;;;;6BAOK;MAAA,kBAYH,KAAKC,KAZF;MAAA,IAELC,IAFK,eAELA,IAFK;MAAA,IAGLC,IAHK,eAGLA,IAHK;MAAA,IAILC,KAJK,eAILA,KAJK;MAAA,IAKLC,kBALK,eAKLA,kBALK;MAAA,IAMLC,QANK,eAMLA,QANK;MAAA,IAOLC,KAPK,eAOLA,KAPK;MAAA,IAQLC,KARK,eAQLA,KARK;MAAA,IASLC,MATK,eASLA,MATK;MAAA,IAULC,QAVK,eAULA,OAVK;MAAA,IAWFC,IAXE;;MAaP,IAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;MAEA,OACEtB,oBAACK,wBAAD,CAA0BkB,QAA1B;QAAAC;UAAAC;UAAAC;QAAA;MAAA,GACG,UAACC,OAAD,EAAgE;QAC/D,IAAIC,eAAJ;QAEA,IAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACV,KAARU,KAAkBV,KAA7BU,IAAuCT,MAAM,KAAK,SADrD;;QAGA,IAAIW,OAAJ,EAAa;UACXD,eAAe,GAAGf,KAAK,CAACiB,IAANjB,GACd,0BADcA,GAEd,oBAFJe;QADF,OAIO;UACLA,eAAe,GAAG,aAAlBA;QAGF;;QAAA,OACE5B,oBAACG,UAAD;UACE4B,UAAU,EAAE,KADd;UAEEpB,IAAI,EAAEA,IAFR;UAGEQ,OAAO,EAAE,iBAACa,CAAD,EAAwC;YAC/C,IAAIb,QAAJ,EAAa;cACXA,QAAO,CAACa,CAAD,CAAPb;YAGF;;YAAA,IAAIQ,OAAJ,EAAa;cACXA,OAAO,CAACM,aAARN,CAAsB,CAACE,OAAD,GAAWZ,KAAX,GAAmB,IAAzCU;YAEH;UAXH;UAYEf,IAAI,EAAEA,IAZR;UAaEE,kBAAkB,EAAEA,kBAbtB;UAcEC,QAAQ,EAAEA,QAdZ;UAeEC,KAAK,EAAE,CACLkB,MAAM,CAACC,OADF,EAEL;YACEP,eAAe,EAAfA,eADF;YAEEP,YAAY,EAAZA,YAFF;YAGEe,WAAW,EAAElC,KAAK,CAACW,KAAK,CAACiB,IAANjB,GAAaL,KAAbK,GAAqBN,KAAtB,CAALL,CACVmC,KADUnC,CACJ,IADIA,EAEVoC,GAFUpC,GAGVqC,MAHUrC;UAHf,CAFK,EAULc,KAVK;QAfT,GA2BMI,IA3BN;UAAAI;YAAAC;YAAAC;UAAA;QAAA,GADF;MAfJ,EADF;;;;;EAtBuB1B,KAAK,CAACwC,S;;AAA3B/B,Y,CAEGgC,KAFHhC,GAEWL,iBAFXK;AAAAA,Y,CAKGiC,GALHjC,GAKSH,eALTG;AA2EN,IAAMyB,MAAM,GAAGS,UAAU,CAACC,MAAXD,CAAkB;EAC/BR,OAAO,EAAE;IACPU,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlBJ,CAAf;AAQA,eAAe1C,SAAS,CAACQ,YAAD,CAAxB","names":["React","withTheme","color","IconButton","ToggleButtonGroup","ToggleButtonGroupContext","ToggleButtonRow","black","white","ToggleButton","props","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","Consumer","__source","fileName","lineNumber","context","backgroundColor","checked","dark","borderless","e","onValueChange","styles","content","borderColor","alpha","rgb","string","Component","Group","Row","StyleSheet","create","width","height","margin"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport { IconSource } from '../Icon';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * class ToggleButtonExample extends React.Component {\n *   state = {\n *     status: 'checked',\n *   };\n *\n *   render() {\n *     return (\n *       <ToggleButton\n *         icon=\"bluetooth\"\n *         value=\"bluetooth\"\n *         status={this.state.status}\n *         onPress={value =>\n *           this.setState({\n *             status: value === 'checked' ? 'unchecked' : 'checked',\n *           })\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}