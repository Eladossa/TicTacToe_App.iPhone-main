{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInput.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInputOutlined from \"./TextInputOutlined\";\nimport TextInputFlat from \"./TextInputFlat\";\nimport { withTheme } from \"../../core/theming\";\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\n\nvar TextInput = function (_React$Component) {\n  _inherits(TextInput, _React$Component);\n\n  function TextInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextInput)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n    _this.state = {\n      labeled: new Animated.Value((_this.props.value !== undefined ? _this.props.value : _this.props.defaultValue) ? 0 : 1),\n      error: new Animated.Value(_this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue,\n      labelLayout: {\n        measured: false,\n        width: 0,\n        height: 0\n      }\n    };\n\n    _this.showPlaceholder = function () {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n      }\n\n      _this.timer = setTimeout(function () {\n        return _this.setState({\n          placeholder: _this.props.placeholder\n        });\n      }, 50);\n    };\n\n    _this.hidePlaceholder = function () {\n      return _this.setState({\n        placeholder: ''\n      });\n    };\n\n    _this.showError = function () {\n      Animated.timing(_this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start(_this.showPlaceholder);\n    };\n\n    _this.hideError = function () {\n      Animated.timing(_this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    };\n\n    _this.restoreLabel = function () {\n      return Animated.timing(_this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    };\n\n    _this.minimizeLabel = function () {\n      return Animated.timing(_this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    };\n\n    _this.handleFocus = function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(args);\n      }\n    };\n\n    _this.handleBlur = function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(args);\n      }\n    };\n\n    _this.handleChangeText = function (value) {\n      if (!_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        value: value\n      });\n\n      _this.props.onChangeText && _this.props.onChangeText(value);\n    };\n\n    _this.handleLayoutAnimatedText = function (e) {\n      _this.setState({\n        labelLayout: {\n          width: e.nativeEvent.layout.width,\n          height: e.nativeEvent.layout.height,\n          measured: true\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.focused !== this.state.focused || prevState.value !== this.state.value || prevState.labelLayout !== this.state.labelLayout) {\n        if (this.state.value || this.state.focused) {\n          this.minimizeLabel();\n        } else {\n          this.restoreLabel();\n        }\n      }\n\n      if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label) {\n        if (this.state.focused || !this.props.label) {\n          this.showPlaceholder();\n        } else {\n          this.hidePlaceholder();\n        }\n      }\n\n      if (prevProps.error !== this.props.error) {\n        if (this.props.error) {\n          this.showError();\n        } else {\n          this.hideError();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _ref = this.props,\n          mode = _ref.mode,\n          rest = _objectWithoutProperties(_ref, [\"mode\"]);\n\n      return mode === 'outlined' ? React.createElement(TextInputOutlined, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        }\n      })) : React.createElement(TextInputFlat, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return {\n        value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n      };\n    }\n  }]);\n\n  return TextInput;\n}(React.Component);\n\nTextInput.defaultProps = {\n  mode: 'flat',\n  dense: false,\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      }\n    }));\n  }\n};\nexport default withTheme(TextInput);","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAQA,OAAOC,iBAAP;AACA,OAAOC,aAAP;AACA,SAASC,SAAT;AAIA,IAAMC,uBAAuB,GAAG,GAAhC;AACA,IAAMC,wBAAwB,GAAG,GAAjC;;IAsJMC,S;;;;;;;;;;;;;;;UAoBJC,K,GAAQ;MACNC,OAAO,EAAE,IAAIC,QAAQ,CAACC,KAAb,CACP,CAACC,MAAKC,KAAL,CAAWC,KAAX,KAAqBC,SAArB,GACCH,MAAKC,KAAL,CAAWC,KADZ,GAECF,MAAKC,KAAL,CAAWG,YAFb,IAGI,CAHJ,GAII,CALG,CADH;MAQNC,KAAK,EAAE,IAAIP,QAAQ,CAACC,KAAb,CAAmBC,MAAKC,KAAL,CAAWI,KAAX,GAAmB,CAAnB,GAAuB,CAA1C,CARD;MASNC,OAAO,EAAE,KATH;MAUNC,WAAW,EAAE,EAVP;MAWNL,KAAK,EACHF,MAAKC,KAAL,CAAWC,KAAX,KAAqBC,SAArB,GACIH,MAAKC,KAAL,CAAWC,KADf,GAEIF,MAAKC,KAAL,CAAWG,YAdX;MAeNI,WAAW,EAAE;QACXC,QAAQ,EAAE,KADC;QAEXC,KAAK,EAAE,CAFI;QAGXC,MAAM,EAAE;MAHG;IAfP,C;;UAuEAC,e,GAAkB,YAAM;MAC9B,IAAIZ,MAAKa,KAAT,EAAgB;QACdC,YAAY,CAACd,MAAKa,KAAN,CAAZC;MAMF;;MAAAd,MAAKa,KAAL,GAAaE,UAAU,CACrB;QAAA,OACEf,MAAKgB,QAAL,CAAc;UACZT,WAAW,EAAEP,MAAKC,KAAL,CAAWM;QADZ,CAAd,CADF;MADqB,GAKrB,EALqB,CAAvB;;;UASMU,e,GAAkB;MAAA,OACxBjB,MAAKgB,QAAL,CAAc;QACZT,WAAW,EAAE;MADD,CAAd,CADwB;;;UAQlBW,S,GAAY,YAAM;MACxBpB,QAAQ,CAACqB,MAATrB,CAAgBE,MAAKJ,KAAL,CAAWS,KAA3BP,EAAkC;QAChCsB,OAAO,EAAE,CADuB;QAEhCC,QAAQ,EAAE3B,wBAFsB;QAIhC4B,eAAe,EAAEC,QAAQ,CAACC,MAATD,CAAgB;UAC/BE,GAAG,EAAE,KAD0B;UAE/BC,OAAO,EAAE;QAFsB,CAAhBH;MAJe,CAAlCzB,EAQG6B,KARH7B,CAQSE,MAAKY,eARdd;;;UAWM8B,S,GAAY,YAAM;MACxB9B,QAAQ,CAACqB,MAATrB,CAAgBE,MAAKJ,KAAL,CAAWS,KAA3BP,EAAkC;QAChCsB,OAAO,EAAE,CADuB;QAEhCC,QAAQ,EAAE5B,uBAFsB;QAIhC6B,eAAe,EAAEC,QAAQ,CAACC,MAATD,CAAgB;UAC/BE,GAAG,EAAE,KAD0B;UAE/BC,OAAO,EAAE;QAFsB,CAAhBH;MAJe,CAAlCzB,EAQG6B,KARH7B;;;UAWM+B,Y,GAAe;MAAA,OACrB/B,QAAQ,CAACqB,MAATrB,CAAgBE,MAAKJ,KAAL,CAAWC,OAA3BC,EAAoC;QAClCsB,OAAO,EAAE,CADyB;QAElCC,QAAQ,EAAE3B,wBAFwB;QAIlC4B,eAAe,EAAEC,QAAQ,CAACC,MAATD,CAAgB;UAC/BE,GAAG,EAAE,KAD0B;UAE/BC,OAAO,EAAE;QAFsB,CAAhBH;MAJiB,CAApCzB,EAQG6B,KARH7B,EADqB;;;UAWfgC,a,GAAgB;MAAA,OACtBhC,QAAQ,CAACqB,MAATrB,CAAgBE,MAAKJ,KAAL,CAAWC,OAA3BC,EAAoC;QAClCsB,OAAO,EAAE,CADyB;QAElCC,QAAQ,EAAE5B,uBAFwB;QAIlC6B,eAAe,EAAEC,QAAQ,CAACC,MAATD,CAAgB;UAC/BE,GAAG,EAAE,KAD0B;UAE/BC,OAAO,EAAE;QAFsB,CAAhBH;MAJiB,CAApCzB,EAQG6B,KARH7B,EADsB;;;UAWhBiC,W,GAAc,UAACC,IAAD,EAAe;MACnC,IAAIhC,MAAKC,KAAL,CAAWgC,QAAX,IAAuB,CAACjC,MAAKC,KAAL,CAAWiC,QAAvC,EAAiD;QAC/C;MAGF;;MAAAlC,MAAKgB,QAAL,CAAc;QAAEV,OAAO,EAAE;MAAX,CAAd;;MAEA,IAAIN,MAAKC,KAAL,CAAWkC,OAAf,EAAwB;QACtBnC,MAAKC,KAAL,CAAWkC,OAAX,CAAmBH,IAAnB;MAEH;;;UAEOI,U,GAAa,UAACJ,IAAD,EAAkB;MACrC,IAAIhC,MAAKC,KAAL,CAAWgC,QAAX,IAAuB,CAACjC,MAAKC,KAAL,CAAWiC,QAAvC,EAAiD;QAC/C;MAGF;;MAAAlC,MAAKgB,QAAL,CAAc;QAAEV,OAAO,EAAE;MAAX,CAAd;;MAEA,IAAIN,MAAKC,KAAL,CAAWoC,MAAf,EAAuB;QACrBrC,MAAKC,KAAL,CAAWoC,MAAX,CAAkBL,IAAlB;MAEH;;;UAEOM,gB,GAAmB,UAACpC,KAAD,EAAmB;MAC5C,IAAI,CAACF,MAAKC,KAAL,CAAWiC,QAAhB,EAA0B;QACxB;MAGF;;MAAAlC,MAAKgB,QAAL,CAAc;QAAEd,KAAK,EAALA;MAAF,CAAd;;MACAF,MAAKC,KAAL,CAAWsC,YAAX,IAA2BvC,MAAKC,KAAL,CAAWsC,YAAX,CAAwBrC,KAAxB,CAA3B;;;UAGMsC,wB,GAA2B,UAACC,CAAD,EAA0B;MAC3DzC,MAAKgB,QAAL,CAAc;QACZR,WAAW,EAAE;UACXE,KAAK,EAAE+B,CAAC,CAACC,WAAFD,CAAcE,MAAdF,CAAqB/B,KADjB;UAEXC,MAAM,EAAE8B,CAAC,CAACC,WAAFD,CAAcE,MAAdF,CAAqB9B,MAFlB;UAGXF,QAAQ,EAAE;QAHC;MADD,CAAd;;;;;;;;uCAxJiBmC,S,EAA2BC,S,EAAkB;MAC9D,IACEA,SAAS,CAACvC,OAAVuC,KAAsB,KAAKjD,KAAL,CAAWU,OAAjCuC,IACAA,SAAS,CAAC3C,KAAV2C,KAAoB,KAAKjD,KAAL,CAAWM,KAD/B2C,IAIAA,SAAS,CAACrC,WAAVqC,KAA0B,KAAKjD,KAAL,CAAWY,WALvC,EAME;QAGA,IAAI,KAAKZ,KAAL,CAAWM,KAAX,IAAoB,KAAKN,KAAL,CAAWU,OAAnC,EAA4C;UAC1C,KAAKwB,aAAL;QADF,OAEO;UACL,KAAKD,YAAL;QAEH;MAED;;MAAA,IACEgB,SAAS,CAACvC,OAAVuC,KAAsB,KAAKjD,KAAL,CAAWU,OAAjCuC,IACAD,SAAS,CAACE,KAAVF,KAAoB,KAAK3C,KAAL,CAAW6C,KAFjC,EAGE;QAIA,IAAI,KAAKlD,KAAL,CAAWU,OAAX,IAAsB,CAAC,KAAKL,KAAL,CAAW6C,KAAtC,EAA6C;UAC3C,KAAKlC,eAAL;QADF,OAEO;UACL,KAAKK,eAAL;QAEH;MAED;;MAAA,IAAI2B,SAAS,CAACvC,KAAVuC,KAAoB,KAAK3C,KAAL,CAAWI,KAAnC,EAA0C;QAExC,IAAI,KAAKJ,KAAL,CAAWI,KAAf,EAAsB;UACpB,KAAKa,SAAL;QADF,OAEO;UACL,KAAKU,SAAL;QAEH;MACF;;;;2CAEsB;MACrB,IAAI,KAAKf,KAAT,EAAgB;QACdC,YAAY,CAAC,KAAKD,KAAN,CAAZC;MAEH;;;;mCAuHckB,I,EAAc;MAC3B,OAAO,KAAKe,IAAL,IAAa,KAAKA,IAAL,CAAUC,cAAV,CAAyBhB,IAAzB,CAApB;;;;gCAMU;MACV,OAAO,KAAKe,IAAL,IAAa,KAAKA,IAAL,CAAUE,SAAV,EAApB;;;;4BAMM;MACN,OAAO,KAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUG,KAAV,EAApB;;;;4BAMM;MACN,OAAO,KAAKH,IAAL,IAAa,KAAKA,IAAL,CAAUI,KAAV,EAApB;;;;2BAMK;MACL,OAAO,KAAKJ,IAAL,IAAa,KAAKA,IAAL,CAAUK,IAAV,EAApB;;;;6BAGO;MAAA;;MAAA,WACmB,KAAKnD,KADxB;MAAA,IACCoD,IADD,QACCA,IADD;MAAA,IACUC,IADV;;MAGP,OAAOD,IAAI,KAAK,UAATA,GACLhE,oBAACC,iBAAD,eACMgE,IADN;QAEEpD,KAAK,EAAE,KAAKN,KAAL,CAAWM,KAFpB;QAGEqD,WAAW,EAAE,KAAK3D,KAHpB;QAIE4D,QAAQ,EAAE,uBAAO;UACfC,MAAI,CAACV,IAAL,GAAYW,GAAZ;QALJ;QAOEvB,OAAO,EAAE,KAAKJ,WAPhB;QAQEM,MAAM,EAAE,KAAKD,UARf;QASEG,YAAY,EAAE,KAAKD,gBATrB;QAUEqB,oBAAoB,EAAE,KAAKnB,wBAV7B;QAAAoB;UAAAC;UAAAC;QAAA;MAAA,GADKT,GAcLhE,oBAACE,aAAD,eACM+D,IADN;QAEEpD,KAAK,EAAE,KAAKN,KAAL,CAAWM,KAFpB;QAGEqD,WAAW,EAAE,KAAK3D,KAHpB;QAIE4D,QAAQ,EAAE,uBAAO;UACfC,MAAI,CAACV,IAAL,GAAYW,GAAZ;QALJ;QAOEvB,OAAO,EAAE,KAAKJ,WAPhB;QAQEM,MAAM,EAAE,KAAKD,UARf;QASEG,YAAY,EAAE,KAAKD,gBATrB;QAUEqB,oBAAoB,EAAE,KAAKnB,wBAV7B;QAAAoB;UAAAC;UAAAC;QAAA;MAAA,GAdF;;;;6CAxO8BC,S,EAA2BlB,S,EAAkB;MAC3E,OAAO;QACL3C,KAAK,EACH,OAAO6D,SAAS,CAAC7D,KAAjB,KAA2B,WAA3B,GACI6D,SAAS,CAAC7D,KADd,GAEI2C,SAAS,CAAC3C;MAJX,CAAP;;;;;EAZoBb,KAAK,CAAC2E,S;;AAAxBrE,S,CACGsE,YADHtE,GAC2C;EAC7C0D,IAAI,EAAE,MADuC;EAE7Ca,KAAK,EAAE,KAFsC;EAG7CjC,QAAQ,EAAE,KAHmC;EAI7C5B,KAAK,EAAE,KAJsC;EAK7C8D,SAAS,EAAE,KALkC;EAM7CjC,QAAQ,EAAE,IANmC;EAO7CkC,MAAM,EAAE,gBAACnE,KAAD;IAAA,OAAwBZ,oBAACgF,eAAD,eAAqBpE,KAArB;MAAA2D;QAAAC;QAAAC;MAAA;IAAA,GAAxB;EAPqC;AAAA,CAD3CnE;AAiRN,eAAeH,SAAS,CAACG,SAAD,CAAxB","names":["React","TextInputOutlined","TextInputFlat","withTheme","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","state","labeled","Animated","Value","_this","props","value","undefined","defaultValue","error","focused","placeholder","labelLayout","measured","width","height","showPlaceholder","timer","clearTimeout","setTimeout","setState","hidePlaceholder","showError","timing","toValue","duration","useNativeDriver","Platform","select","ios","default","start","hideError","restoreLabel","minimizeLabel","handleFocus","args","disabled","editable","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","nativeEvent","layout","prevProps","prevState","label","root","setNativeProps","isFocused","clear","focus","blur","mode","rest","parentState","innerRef","_this2","ref","onLayoutAnimatedText","__source","fileName","lineNumber","nextProps","Component","defaultProps","dense","multiline","render","NativeTextInput"],"sources":["TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport { withTheme } from '../../core/theming';\nimport { RenderProps, State } from './types';\nimport { Theme, $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: any;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <TextInput\n *         label='Email'\n *         value={this.state.text}\n *         onChangeText={text => this.setState({ text })}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n\n  state = {\n    labeled: new Animated.Value(\n      (this.props.value !== undefined\n      ? this.props.value\n      : this.props.defaultValue)\n        ? 0\n        : 1\n    ),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value:\n      this.props.value !== undefined\n        ? this.props.value\n        : this.props.defaultValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    if (\n      prevState.focused !== this.state.focused ||\n      prevState.value !== this.state.value ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      prevState.labelLayout !== this.state.labelLayout\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (\n      prevState.focused !== this.state.focused ||\n      prevProps.label !== this.props.label\n    ) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (prevProps.error !== this.props.error) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    // @ts-ignore\n    this.timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: number;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this.showPlaceholder);\n  };\n\n  private hideError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  private minimizeLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}