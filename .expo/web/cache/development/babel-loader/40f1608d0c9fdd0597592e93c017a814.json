{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Divider.tsx\";\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Divider = function (_React$Component) {\n  _inherits(Divider, _React$Component);\n\n  function Divider() {\n    _classCallCheck(this, Divider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Divider).apply(this, arguments));\n  }\n\n  _createClass(Divider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          inset = _this$props.inset,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"inset\", \"style\", \"theme\"]);\n\n      var isDarkTheme = theme.dark;\n      return React.createElement(View, _extends({}, rest, {\n        style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }));\n    }\n  }]);\n\n  return Divider;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;;IAoCMC,O;;;;;;;;;;;6BACK;MAAA,kBACkC,KAAKC,KADvC;MAAA,IACCC,KADD,eACCA,KADD;MAAA,IACQC,KADR,eACQA,KADR;MAAA,IACeC,KADf,eACeA,KADf;MAAA,IACyBC,IADzB;;MAAA,IAEOC,WAFP,GAEuBF,KAFvB,CAECG,IAFD;MAGP,OACEZ,oBAACa,IAAD,eACMH,IADN;QAEEF,KAAK,EAAE,CACLG,WAAW,GAAGG,MAAM,CAACF,IAAV,GAAiBE,MAAM,CAACC,KAD9B,EAELR,KAAK,IAAIO,MAAM,CAACP,KAFX,EAGLC,KAHK,CAFT;QAAAQ;UAAAC;UAAAC;QAAA;MAAA,GADF;;;;;EAJkBlB,KAAK,CAACmB,S;;AAiB5B,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAXD,CAAkB;EAC/BL,KAAK,EAAE;IACLO,eAAe,EAAErB,KAAK,CAACE,KAAD,CAALF,CACdsB,KADctB,CACR,IADQA,EAEduB,GAFcvB,GAGdwB,MAHcxB,EADZ;IAKLyB,MAAM,EAAEN,UAAU,CAACO;EALd,CADwB;EAQ/Bf,IAAI,EAAE;IACJU,eAAe,EAAErB,KAAK,CAACG,KAAD,CAALH,CACdsB,KADctB,CACR,IADQA,EAEduB,GAFcvB,GAGdwB,MAHcxB,EADb;IAKJyB,MAAM,EAAEN,UAAU,CAACO;EALf,CARyB;EAe/BpB,KAAK,EAAE;IACLqB,UAAU,EAAE;EADP;AAfwB,CAAlBR,CAAf;AAoBA,eAAelB,SAAS,CAACG,OAAD,CAAxB","names":["React","color","withTheme","black","white","Divider","props","inset","style","theme","rest","isDarkTheme","dark","View","styles","light","__source","fileName","lineNumber","Component","StyleSheet","create","backgroundColor","alpha","rgb","string","height","hairlineWidth","marginLeft"],"sources":["Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Divider extends React.Component<Props> {\n  render() {\n    const { inset, style, theme, ...rest } = this.props;\n    const { dark: isDarkTheme } = theme;\n    return (\n      <View\n        {...rest}\n        style={[\n          isDarkTheme ? styles.dark : styles.light,\n          inset && styles.inset,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"module"}