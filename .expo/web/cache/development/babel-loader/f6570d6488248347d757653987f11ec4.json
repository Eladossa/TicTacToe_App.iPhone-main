{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Dialog/Dialog.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"../Modal\";\nimport DialogContent from \"./DialogContent\";\nimport DialogActions from \"./DialogActions\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogScrollArea from \"./DialogScrollArea\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Dialog).apply(this, arguments));\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          onDismiss = _this$props.onDismiss,\n          visible = _this$props.visible,\n          style = _this$props.style,\n          theme = _this$props.theme;\n      return React.createElement(Modal, {\n        dismissable: dismissable,\n        onDismiss: onDismiss,\n        visible: visible,\n        contentContainerStyle: [{\n          borderRadius: theme.roundness,\n          backgroundColor: theme.colors.surface\n        }, styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }, React.Children.toArray(children).filter(function (child) {\n        return child != null && typeof child !== 'boolean';\n      }).map(function (child, i) {\n        if (i === 0 && React.isValidElement(child) && child.type === DialogContent) {\n          return React.cloneElement(child, {\n            style: [{\n              paddingTop: 24\n            }, child.props.style]\n          });\n        }\n\n        return child;\n      }));\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nDialog.Content = DialogContent;\nDialog.Actions = DialogActions;\nDialog.Title = DialogTitle;\nDialog.ScrollArea = DialogScrollArea;\nDialog.defaultProps = {\n  dismissable: true,\n  visible: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,gBAAP;AACA,SAASC,SAAT;;IA0EMC,M;;;;;;;;;;;6BAeK;MAAA,kBAQH,KAAKC,KARF;MAAA,IAELC,QAFK,eAELA,QAFK;MAAA,IAGLC,WAHK,eAGLA,WAHK;MAAA,IAILC,SAJK,eAILA,SAJK;MAAA,IAKLC,OALK,eAKLA,OALK;MAAA,IAMLC,KANK,eAMLA,KANK;MAAA,IAOLC,KAPK,eAOLA,KAPK;MAUP,OACEd,oBAACC,KAAD;QACES,WAAW,EAAEA,WADf;QAEEC,SAAS,EAAEA,SAFb;QAGEC,OAAO,EAAEA,OAHX;QAIEG,qBAAqB,EAAE,CACrB;UACEC,YAAY,EAAEF,KAAK,CAACG,SADtB;UAEEC,eAAe,EAAEJ,KAAK,CAACK,MAANL,CAAaM;QAFhC,CADqB,EAKrBC,MAAM,CAACC,SALc,EAMrBT,KANqB,CAJzB;QAAAU;UAAAC;UAAAC;QAAA;MAAA,GAaGzB,KAAK,CAAC0B,QAAN1B,CAAe2B,OAAf3B,CAAuBS,QAAvBT,EACE4B,MADF5B,CACS,iBAAK;QAAA,OAAI6B,KAAK,IAAI,IAATA,IAAiB,OAAOA,KAAP,KAAiB,SAAtC;MADd,GAEEC,GAFF9B,CAEM,UAAC6B,KAAD,EAAQE,CAAR,EAAc;QACjB,IACEA,CAAC,KAAK,CAANA,IACA/B,KAAK,CAACgC,cAANhC,CAAqB6B,KAArB7B,CADA+B,IAEAF,KAAK,CAACI,IAANJ,KAAe3B,aAHjB,EAIE;UAEA,OAAOF,KAAK,CAACkC,YAANlC,CAAmB6B,KAAnB7B,EAA0B;YAC/Ba,KAAK,EAAE,CAAC;cAAEsB,UAAU,EAAE;YAAd,CAAD,EAAqBN,KAAK,CAACrB,KAANqB,CAAYhB,KAAjC;UADwB,CAA1Bb,CAAP;QAKF;;QAAA,OAAO6B,KAAP;MAdH,EAbH,CADF;;;;;EAzBiB7B,KAAK,CAACoC,S;;AAArB7B,M,CAEG8B,OAFH9B,GAEaL,aAFbK;AAAAA,M,CAIG+B,OAJH/B,GAIaJ,aAJbI;AAAAA,M,CAMGgC,KANHhC,GAMWH,WANXG;AAAAA,M,CAQGiC,UARHjC,GAQgBF,gBARhBE;AAAAA,M,CAUGkC,YAVHlC,GAUkB;EACpBG,WAAW,EAAE,IADO;EAEpBE,OAAO,EAAE;AAFW,CAVlBL;AA4DN,IAAMc,MAAM,GAAGqB,UAAU,CAACC,MAAXD,CAAkB;EAC/BpB,SAAS,EAAE;IAQTsB,cAAc,EAAEC,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,GAA4B,EAA5BA,GAAiC,CARxC;IASTE,gBAAgB,EAAE,EATT;IAUTC,SAAS,EAAE,EAVF;IAWTC,cAAc,EAAE;EAXP;AADoB,CAAlBP,CAAf;AAgBA,eAAepC,SAAS,CAACC,MAAD,CAAxB","names":["React","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","Dialog","props","children","dismissable","onDismiss","visible","style","theme","contentContainerStyle","borderRadius","roundness","backgroundColor","colors","surface","styles","container","__source","fileName","lineNumber","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","Component","Content","Actions","Title","ScrollArea","defaultProps","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","elevation","justifyContent"],"sources":["Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showDialog = () => this.setState({ visible: true });\n *\n *   _hideDialog = () => this.setState({ visible: false });\n *\n *   render() {\n *     return (\n *       <View>\n *         <Button onPress={this._showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog\n *              visible={this.state.visible}\n *              onDismiss={this._hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={this._hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor: theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}