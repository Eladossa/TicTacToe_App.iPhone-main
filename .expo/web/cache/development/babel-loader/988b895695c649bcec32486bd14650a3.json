{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButtonRow.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButton from \"./ToggleButton\";\n\nvar ToggleButtonRow = function (_React$Component) {\n  _inherits(ToggleButtonRow, _React$Component);\n\n  function ToggleButtonRow() {\n    _classCallCheck(this, ToggleButtonRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToggleButtonRow).apply(this, arguments));\n  }\n\n  _createClass(ToggleButtonRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onValueChange = _this$props.onValueChange,\n          children = _this$props.children,\n          style = _this$props.style;\n      var count = React.Children.count(children);\n      return React.createElement(ToggleButton.Group, {\n        value: value,\n        onValueChange: onValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        }\n      }, React.createElement(View, {\n        style: [styles.row, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }, React.Children.map(children, function (child, i) {\n        if (child && child.type === ToggleButton) {\n          return React.cloneElement(child, {\n            style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n          });\n        }\n\n        return child;\n      })));\n    }\n  }]);\n\n  return ToggleButtonRow;\n}(React.Component);\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;","map":{"version":3,"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,YAAP;;IA8CMC,e;;;;;;;;;;;6BAGK;MAAA,kBAC2C,KAAKC,KADhD;MAAA,IACCC,KADD,eACCA,KADD;MAAA,IACQC,aADR,eACQA,aADR;MAAA,IACuBC,QADvB,eACuBA,QADvB;MAAA,IACiCC,KADjC,eACiCA,KADjC;MAEP,IAAMC,KAAK,GAAGR,KAAK,CAACS,QAANT,CAAeQ,KAAfR,CAAqBM,QAArBN,CAAd;MAEA,OACEA,oBAACC,YAAD,CAAcS,KAAd;QAAoBN,KAAK,EAAEA,KAA3B;QAAkCC,aAAa,EAAEA,aAAjD;QAAAM;UAAAC;UAAAC;QAAA;MAAA,GACEb,oBAACc,IAAD;QAAMP,KAAK,EAAE,CAACQ,MAAM,CAACC,GAAR,EAAaT,KAAb,CAAb;QAAAI;UAAAC;UAAAC;QAAA;MAAA,GACGb,KAAK,CAACS,QAANT,CAAeiB,GAAfjB,CAAmBM,QAAnBN,EAA6B,UAACkB,KAAD,EAAQC,CAAR,EAAc;QAE1C,IAAID,KAAK,IAAIA,KAAK,CAACE,IAANF,KAAejB,YAA5B,EAA0C;UAExC,OAAOD,KAAK,CAACqB,YAANrB,CAAmBkB,KAAnBlB,EAA0B;YAC/BO,KAAK,EAAE,CACLQ,MAAM,CAACO,MADF,EAELH,CAAC,KAAK,CAANA,GACIJ,MAAM,CAACQ,KADXJ,GAEIA,CAAC,KAAKX,KAAK,GAAG,CAAdW,GACAJ,MAAM,CAACS,IADPL,GAEAJ,MAAM,CAACU,MANN,EAQLP,KAAK,CAACf,KAANe,CAAYX,KARP;UADwB,CAA1BP,CAAP;QAcF;;QAAA,OAAOkB,KAAP;MAlBD,EADH,CADF,CADF;;;;;EAP0BlB,KAAK,CAAC0B,S;;AAA9BxB,e,CACGyB,WADHzB,GACiB,kBADjBA;AAoCN,IAAMa,MAAM,GAAGa,UAAU,CAACC,MAAXD,CAAkB;EAC/BZ,GAAG,EAAE;IACHc,aAAa,EAAE;EADZ,CAD0B;EAI/BR,MAAM,EAAE;IACNS,WAAW,EAAEH,UAAU,CAACI;EADlB,CAJuB;EAQ/BT,KAAK,EAAE;IACLU,oBAAoB,EAAE,CADjB;IAELC,uBAAuB,EAAE;EAFpB,CARwB;EAa/BT,MAAM,EAAE;IACNU,YAAY,EAAE,CADR;IAENC,eAAe,EAAE;EAFX,CAbuB;EAkB/BZ,IAAI,EAAE;IACJY,eAAe,EAAE,CADb;IAEJC,mBAAmB,EAAE,CAFjB;IAGJC,sBAAsB,EAAE;EAHpB;AAlByB,CAAlBV,CAAf;AAyBA,eAAe1B,eAAf","names":["React","ToggleButton","ToggleButtonRow","props","value","onValueChange","children","style","count","Children","Group","__source","fileName","lineNumber","View","styles","row","map","child","i","type","cloneElement","button","first","last","middle","Component","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { ToggleButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'left',\n *   };\n *\n *   render() {\n *     return(\n *       <ToggleButton.Row\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *       </ToggleButton.Row>\n *     )\n *   }\n * }\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]},"metadata":{},"sourceType":"module"}