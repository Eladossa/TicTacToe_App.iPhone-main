{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Drawer/DrawerItem.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerItem = function (_React$Component) {\n  _inherits(DrawerItem, _React$Component);\n\n  function DrawerItem() {\n    _classCallCheck(this, DrawerItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DrawerItem).apply(this, arguments));\n  }\n\n  _createClass(DrawerItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          active = _this$props.active,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          onPress = _this$props.onPress,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n      var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n      var font = theme.fonts.medium;\n      var labelMargin = icon ? 32 : 0;\n      return React.createElement(View, _extends({}, rest, {\n        style: [styles.container, {\n          backgroundColor: backgroundColor,\n          borderRadius: roundness\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        style: {\n          borderRadius: roundness\n        },\n        accessibilityTraits: active ? ['button', 'selected'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: active ? ['selected'] : [],\n        accessibilityLabel: accessibilityLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }, React.createElement(View, {\n        style: styles.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        }\n      }, icon ? React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: contentColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      }) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, _objectSpread({\n          color: contentColor\n        }, font, {\n          marginLeft: labelMargin\n        })],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }, label))));\n    }\n  }]);\n\n  return DrawerItem;\n}(React.Component);\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"mappings":"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","names":["color","React","Text","Icon","TouchableRipple","withTheme","DrawerItem","props","icon","label","active","theme","style","onPress","accessibilityLabel","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","View","styles","container","borderRadius","__source","fileName","lineNumber","borderless","delayPressIn","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","wrapper","source","size","numberOfLines","marginLeft","Component","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"sources":["DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Drawer.Item label=\"First Item\" />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const {\n      icon,\n      label,\n      active,\n      theme,\n      style,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary)\n          .alpha(0.12)\n          .rgb()\n          .string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text)\n          .alpha(0.68)\n          .rgb()\n          .string();\n    const font = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={active ? ['selected'] : []}\n          accessibilityLabel={accessibilityLabel}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}