{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/HelperText.tsx\";\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"./Typography/AnimatedText\";\nimport { withTheme } from \"../core/theming\";\n\nvar HelperText = function (_React$PureComponent) {\n  _inherits(HelperText, _React$PureComponent);\n\n  function HelperText() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HelperText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HelperText)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      shown: new Animated.Value(_this.props.visible ? 1 : 0),\n      textHeight: 0\n    };\n\n    _this.showText = function () {\n      Animated.timing(_this.state.shown, {\n        toValue: 1,\n        duration: 150,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this.hideText = function () {\n      Animated.timing(_this.state.shown, {\n        toValue: 0,\n        duration: 180,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this.handleTextLayout = function (e) {\n      _this.props.onLayout && _this.props.onLayout(e);\n\n      _this.setState({\n        textHeight: e.nativeEvent.layout.height\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HelperText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {\n        if (this.props.visible) {\n          this.showText();\n        } else {\n          this.hideText();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          type = _this$props.type,\n          visible = _this$props.visible,\n          theme = _this$props.theme,\n          onLayout = _this$props.onLayout,\n          padding = _this$props.padding,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"]);\n\n      var colors = theme.colors,\n          dark = theme.dark;\n      var textColor = this.props.type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n      return React.createElement(AnimatedText, _extends({\n        onLayout: this.handleTextLayout,\n        style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n          color: textColor,\n          opacity: this.state.shown,\n          transform: visible && type === 'error' ? [{\n            translateY: this.state.shown.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-this.state.textHeight / 2, 0]\n            })\n          }] : []\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return HelperText;\n}(React.PureComponent);\n\nHelperText.defaultProps = {\n  type: 'info',\n  padding: 'normal',\n  visible: true\n};\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"mappings":"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","names":["React","color","AnimatedText","withTheme","HelperText","state","shown","Animated","Value","_this","props","visible","textHeight","showText","timing","toValue","duration","useNativeDriver","start","hideText","handleTextLayout","e","onLayout","setState","nativeEvent","layout","height","prevProps","prevState","style","type","theme","padding","rest","colors","dark","textColor","error","text","alpha","rgb","string","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","__source","fileName","lineNumber","children","PureComponent","defaultProps","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport { Theme, $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentProps<typeof Animated.Text>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  shown: Animated.Value;\n  textHeight: number;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <View>\n *         <TextInput\n *           label=\"Email\"\n *           value={this.state.text}\n *           onChangeText={text => this.setState({ text })}\n *         />\n *         <HelperText\n *           type=\"error\"\n *           visible={!this.state.text.includes('@')}\n *         >\n *           Email address is invalid!\n *         </HelperText>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass HelperText extends React.PureComponent<Props, State> {\n  static defaultProps: Partial<Props> = {\n    type: 'info',\n    padding: 'normal',\n    visible: true,\n  };\n\n  state = {\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\n    textHeight: 0,\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.visible !== this.props.visible ||\n      prevState.textHeight !== this.state.textHeight\n    ) {\n      if (this.props.visible) {\n        this.showText();\n      } else {\n        this.hideText();\n      }\n    }\n  }\n\n  private showText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 0,\n      duration: 180,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private handleTextLayout = (e: LayoutChangeEvent) => {\n    this.props.onLayout && this.props.onLayout(e);\n    this.setState({\n      textHeight: e.nativeEvent.layout.height,\n    });\n  };\n\n  render() {\n    const {\n      style,\n      type,\n      visible,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onLayout,\n      padding,\n      ...rest\n    } = this.props;\n    const { colors, dark } = theme;\n\n    const textColor =\n      this.props.type === 'error'\n        ? colors.error\n        : color(colors.text)\n            .alpha(dark ? 0.7 : 0.54)\n            .rgb()\n            .string();\n\n    return (\n      <AnimatedText\n        onLayout={this.handleTextLayout}\n        style={[\n          styles.text,\n          padding !== 'none' ? styles.padding : {},\n          {\n            color: textColor,\n            opacity: this.state.shown,\n            transform:\n              visible && type === 'error'\n                ? [\n                    {\n                      translateY: this.state.shown.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [-this.state.textHeight / 2, 0],\n                      }),\n                    },\n                  ]\n                : [],\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {this.props.children}\n      </AnimatedText>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}