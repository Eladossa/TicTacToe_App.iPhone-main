{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/BottomNavigation.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = 9999;\nvar Touchable = TouchableRipple.supported ? TouchableRipple : function (_ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n\n  return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    }\n  }), React.createElement(View, {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    }\n  }, children));\n};\n\nvar SceneComponent = function (_React$PureComponent) {\n  _inherits(SceneComponent, _React$PureComponent);\n\n  function SceneComponent() {\n    _classCallCheck(this, SceneComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SceneComponent).apply(this, arguments));\n  }\n\n  _createClass(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          rest = _objectWithoutProperties(_this$props, [\"component\"]);\n\n      return React.createElement(component, rest);\n    }\n  }]);\n\n  return SceneComponent;\n}(React.PureComponent);\n\nvar BottomNavigation = function (_React$Component) {\n  _inherits(BottomNavigation, _React$Component);\n\n  _createClass(BottomNavigation, null, [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref2) {\n        var route = _ref2.route,\n            jumpTo = _ref2.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key ? route.key : ''],\n          route: route,\n          jumpTo: jumpTo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          }\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n          index = _nextProps$navigation.index,\n          routes = _nextProps$navigation.routes;\n      var tabs = routes.map(function (_, i) {\n        return prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(function (_, i) {\n        return prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n\n      if (index !== prevState.current) {\n        _extends(nextState, {\n          current: index,\n          previous: prevState.current,\n          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n        });\n      }\n\n      return nextState;\n    }\n  }]);\n\n  function BottomNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, BottomNavigation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BottomNavigation).call(this, props));\n\n    _this.handleKeyboardShow = function () {\n      return _this.setState({\n        keyboard: true\n      }, function () {\n        return Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      });\n    };\n\n    _this.handleKeyboardHide = function () {\n      return Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    };\n\n    _this.animateToCurrentIndex = function () {\n      var shifting = _this.isShifting();\n\n      var navigationState = _this.props.navigationState;\n      var routes = navigationState.routes,\n          index = navigationState.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 : 0,\n        useNativeDriver: true\n      })].concat(_toConsumableArray(routes.map(function (_, i) {\n        return Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 : 0,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    };\n\n    _this.handleLayout = function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    };\n\n    _this.handleTabPress = function (index) {\n      var _this$props2 = _this.props,\n          navigationState = _this$props2.navigationState,\n          onTabPress = _this$props2.onTabPress,\n          onIndexChange = _this$props2.onIndexChange;\n      var event = {\n        route: navigationState.routes[index],\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          event.defaultPrevented = true;\n        }\n      };\n      onTabPress == null ? void 0 : onTabPress(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    };\n\n    _this.jumpTo = function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      _this.props.onIndexChange(index);\n    };\n\n    _this.isShifting = function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    };\n\n    var _index = _this.props.navigationState.index;\n    _this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(_index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: _index,\n      previous: 0,\n      loaded: [_index],\n      keyboard: false\n    };\n    return _this;\n  }\n\n  _createClass(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateToCurrentIndex();\n\n      if (Platform.OS === 'ios') {\n        Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n      this.animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          navigationState = _this$props3.navigationState,\n          renderScene = _this$props3.renderScene,\n          renderIcon = _this$props3.renderIcon,\n          renderLabel = _this$props3.renderLabel,\n          _this$props3$getLabel = _this$props3.getLabelText,\n          getLabelText = _this$props3$getLabel === void 0 ? function (_ref4) {\n        var route = _ref4.route;\n        return route.title;\n      } : _this$props3$getLabel,\n          _this$props3$getBadge = _this$props3.getBadge,\n          getBadge = _this$props3$getBadge === void 0 ? function (_ref5) {\n        var route = _ref5.route;\n        return route.badge;\n      } : _this$props3$getBadge,\n          _this$props3$getColor = _this$props3.getColor,\n          getColor = _this$props3$getColor === void 0 ? function (_ref6) {\n        var route = _ref6.route;\n        return route.color;\n      } : _this$props3$getColor,\n          _this$props3$getAcces = _this$props3.getAccessibilityLabel,\n          getAccessibilityLabel = _this$props3$getAcces === void 0 ? function (_ref7) {\n        var route = _ref7.route;\n        return route.accessibilityLabel;\n      } : _this$props3$getAcces,\n          _this$props3$getTestI = _this$props3.getTestID,\n          getTestID = _this$props3$getTestI === void 0 ? function (_ref8) {\n        var route = _ref8.route;\n        return route.testID;\n      } : _this$props3$getTestI,\n          activeColor = _this$props3.activeColor,\n          inactiveColor = _this$props3.inactiveColor,\n          keyboardHidesNavigationBar = _this$props3.keyboardHidesNavigationBar,\n          barStyle = _this$props3.barStyle,\n          labeled = _this$props3.labeled,\n          style = _this$props3.style,\n          theme = _this$props3.theme,\n          sceneAnimationEnabled = _this$props3.sceneAnimationEnabled;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          loaded = _this$state.loaded,\n          index = _this$state.index,\n          visible = _this$state.visible,\n          ripple = _this$state.ripple,\n          keyboard = _this$state.keyboard,\n          tabs = _this$state.tabs,\n          offsets = _this$state.offsets;\n      var routes = navigationState.routes;\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n      var shifting = this.isShifting();\n\n      var _ref9 = StyleSheet.flatten(barStyle) || {},\n          customBackground = _ref9.backgroundColor,\n          _ref9$elevation = _ref9.elevation,\n          elevation = _ref9$elevation === void 0 ? 4 : _ref9$elevation;\n\n      var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var backgroundColor = shifting ? index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !color(approxBackgroundColor).isLight();\n      var textColor = isDark ? white : black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n      var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var maxTabBarWidth = maxTabWidth * routes.length;\n      var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n      var tabWidth = tabBarWidth / routes.length;\n      var rippleSize = layout.width / 4;\n      return React.createElement(View, {\n        style: [styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665\n        }\n      }, React.createElement(View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666\n        }\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(index)) {\n          return null;\n        }\n\n        var focused = navigationState.index === index;\n        var opacity = sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n        var top = offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n        return React.createElement(Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews: Platform.OS === 'ios' ? navigationState.index !== index : true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 683\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.content, {\n            top: top\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 698\n          }\n        }, renderScene({\n          route: route,\n          jumpTo: _this3.jumpTo\n        })));\n      })), React.createElement(Surface, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [layout.height, 0]\n            })\n          }],\n          position: keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboard ? 'none' : 'auto' : 'none',\n        onLayout: this.handleLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740\n        }\n      }, React.createElement(SafeAreaView, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabBarWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741\n        }\n      }, shifting ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: (BAR_HEIGHT - rippleSize) / 2,\n          left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n          height: rippleSize,\n          width: rippleSize,\n          borderRadius: rippleSize / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        }\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = tabs[index];\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return React.createElement(Touchable, {\n          key: route.key,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3.handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          accessibilityStates: ['selected'],\n          style: styles.item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 815\n          }\n        }, React.createElement(View, {\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 831\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.iconContainer, {\n            transform: [{\n              translateY: translateY\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.iconWrapper, {\n            opacity: activeOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 838\n          }\n        }, renderIcon ? renderIcon({\n          route: route,\n          focused: true,\n          color: activeTintColor\n        }) : React.createElement(Icon, {\n          source: route.icon,\n          color: activeTintColor,\n          size: 24,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 851\n          }\n        })), React.createElement(Animated.View, {\n          style: [styles.iconWrapper, {\n            opacity: inactiveOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 858\n          }\n        }, renderIcon ? renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveTintColor\n        }) : React.createElement(Icon, {\n          source: route.icon,\n          color: inactiveTintColor,\n          size: 24,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 871\n          }\n        })), React.createElement(View, {\n          style: [styles.badgeContainer, {\n            right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 878\n          }\n        }, typeof badge === 'boolean' ? React.createElement(Badge, {\n          visible: badge,\n          size: 8,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 890\n          }\n        }) : React.createElement(Badge, {\n          visible: badge != null,\n          size: 16,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 892\n          }\n        }, badge))), labeled ? React.createElement(Animated.View, {\n          style: [styles.labelContainer, {\n            transform: [{\n              scale: scale\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 899\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.labelWrapper, {\n            opacity: activeOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 905\n          }\n        }, renderLabel ? renderLabel({\n          route: route,\n          focused: true,\n          color: activeTintColor\n        }) : React.createElement(Text, {\n          style: [styles.label, {\n            color: activeTintColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 918\n          }\n        }, getLabelText({\n          route: route\n        }))), shifting ? null : React.createElement(Animated.View, {\n          style: [styles.labelWrapper, {\n            opacity: inactiveOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 929\n          }\n        }, renderLabel ? renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveTintColor\n        }) : React.createElement(Text, {\n          style: [styles.label, {\n            color: inactiveTintColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 942\n          }\n        }, getLabelText({\n          route: route\n        })))) : React.createElement(View, {\n          style: styles.labelContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 955\n          }\n        })));\n      })))));\n    }\n  }]);\n\n  return BottomNavigation;\n}(React.Component);\n\nBottomNavigation.defaultProps = {\n  labeled: true,\n  keyboardHidesNavigationBar: true\n};\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaView","color","overlay","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Touchable","supported","style","children","borderless","centered","rippleColor","rest","TouchableWithoutFeedback","__source","fileName","lineNumber","View","SceneComponent","props","component","createElement","PureComponent","BottomNavigation","scenes","route","jumpTo","key","nextProps","prevState","navigationState","index","routes","tabs","map","_","i","Animated","Value","offsets","nextState","current","_extends","previous","loaded","includes","_classCallCheck","_this","handleKeyboardShow","setState","keyboard","timing","state","visible","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToCurrentIndex","shifting","isShifting","ripple","setValue","parallel","finished","tab","forEach","offset","handleLayout","e","layout","nativeEvent","height","width","measured","handleTabPress","onTabPress","onIndexChange","event","defaultPrevented","preventDefault","findIndex","length","touch","Platform","OS","Keyboard","addListener","prevProps","_this2","removeListener","renderScene","renderIcon","renderLabel","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","colors","isDarkTheme","dark","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","tabWidth","rippleSize","styles","container","content","background","focused","opacity","top","pointerEvents","accessibilityElementsHidden","importantForAccessibility","absoluteFill","collapsable","removeClippedSubviews","_this3","bar","transform","translateY","position","onLayout","barContent","forceInset","bottom","items","maxWidth","left","borderRadius","scale","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","item","iconContainer","iconWrapper","source","icon","size","badgeContainer","right","String","labelContainer","labelWrapper","label","Component","defaultProps","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","marginHorizontal","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["BottomNavigation.tsx"],"sourcesContent":["/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number reprsenting the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value;\n  /**\n   * Active state of individual tab items, active state is 1 and inactve state is 0.\n   */\n  tabs: Animated.Value[];\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecesary re-renders.\n   */\n  offsets: Animated.Value[];\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value;\n  /**\n   * Animation for the touch, used to determine it's scale and opacity.\n   */\n  touch: Animated.Value;\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value;\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number; width: number; measured: boolean };\n  /**\n   * Currently active index. Used only for getDerivedStateFromProps.\n   */\n  current: number;\n  /**\n   * Previously active index. Used to determine the position of the ripple.\n   */\n  previous: number;\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: number[];\n  /**\n   * Trak whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = 9999;\n\n// @ts-ignore\nconst Touchable = TouchableRipple.supported\n  ? TouchableRipple\n  : // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ style, children, borderless, centered, rippleColor, ...rest }: any) => (\n      <TouchableWithoutFeedback {...rest}>\n        <View style={style}>{children}</View>\n      </TouchableWithoutFeedback>\n    );\n\nclass SceneComponent extends React.PureComponent<any> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     index: 0,\n *     routes: [\n *       { key: 'music', title: 'Music', icon: 'queue-music' },\n *       { key: 'albums', title: 'Albums', icon: 'album' },\n *       { key: 'recents', title: 'Recents', icon: 'history' },\n *     ],\n *   };\n *\n *   _handleIndexChange = index => this.setState({ index });\n *\n *   _renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   render() {\n *     return (\n *       <BottomNavigation\n *         navigationState={this.state}\n *         onIndexChange={this._handleIndexChange}\n *         renderScene={this._renderScene}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass BottomNavigation extends React.Component<Props, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minmize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: Route;\n      jumpTo: (key: string) => void;\n    }>;\n  }) {\n    return ({\n      route,\n      jumpTo,\n    }: {\n      route: Route;\n      jumpTo: (key: string) => void;\n    }) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key ? route.key : '']}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: State) {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_: any, i: number) =>\n        prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_: any, i: number) =>\n        prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    if (index !== prevState.current) {\n      /* $FlowFixMe */\n      Object.assign(nextState, {\n        // Store the current index in state so that we can later check if the index has changed\n        current: index,\n        previous: prevState.current,\n        // Set the current tab to be loaded if it was not loaded before\n        loaded: prevState.loaded.includes(index)\n          ? prevState.loaded\n          : [...prevState.loaded, index],\n      });\n    }\n\n    return nextState;\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { index } = this.props.navigationState;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: index,\n      previous: 0,\n      loaded: [index],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this.animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this.animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  private handleKeyboardShow = () =>\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start()\n    );\n\n  private handleKeyboardHide = () =>\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n\n  private animateToCurrentIndex = () => {\n    const shifting = this.isShifting();\n    const { navigationState } = this.props;\n    const { routes, index } = navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 : 0,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's bacground color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  private handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  private jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      route => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  private isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      getLabelText = ({ route }: { route: Route }) => route.title,\n      getBadge = ({ route }: { route: Route }) => route.badge,\n      getColor = ({ route }: { route: Route }) => route.color,\n      getAccessibilityLabel = ({ route }: { route: Route }) =>\n        route.accessibilityLabel,\n      getTestID = ({ route }: { route: Route }) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n      sceneAnimationEnabled,\n    } = this.props;\n\n    const {\n      layout,\n      loaded,\n      index,\n      visible,\n      ripple,\n      keyboard,\n      tabs,\n      offsets,\n    } = this.state;\n    const { routes } = navigationState;\n    const { colors, dark: isDarkTheme, mode } = theme;\n\n    const shifting = this.isShifting();\n\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n      StyleSheet.flatten(barStyle) || {};\n\n    const approxBackgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n\n    const backgroundColor = shifting\n      ? index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          //@ts-ignore\n          outputRange: routes.map(\n            route => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).isLight();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const touchColor = color(activeColor || activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const maxTabBarWidth = maxTabWidth * routes.length;\n\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n    const tabWidth = tabBarWidth / routes.length;\n\n    const rippleSize = layout.width / 4;\n\n    return (\n      <View style={[styles.container, style]}>\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n            const focused = navigationState.index === index;\n\n            const opacity =\n              sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n\n            const top = offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View style={[styles.content, { top }]}>\n                  {renderScene({\n                    route,\n                    jumpTo: this.jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={\n            [\n              styles.bar,\n              keyboardHidesNavigationBar\n                ? {\n                    // When the keyboard is shown, slide down the navigation bar\n                    transform: [\n                      {\n                        translateY: visible.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [layout.height, 0],\n                        }),\n                      },\n                    ],\n                    // Absolutely position the navigation bar so that the content is below it\n                    // This is needed to avoid gap at bottom when the navigation bar is hidden\n                    position: keyboard ? 'absolute' : null,\n                  }\n                : null,\n              barStyle,\n            ] as StyleProp<ViewStyle>\n          }\n          pointerEvents={\n            layout.measured\n              ? keyboardHidesNavigationBar && keyboard\n                ? 'none'\n                : 'auto'\n              : 'none'\n          }\n          onLayout={this.handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabBarWidth }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: (BAR_HEIGHT - rippleSize) / 2,\n                      left:\n                        tabWidth * (navigationState.index + 0.5) -\n                        rippleSize / 2,\n                      height: rippleSize,\n                      width: rippleSize,\n                      borderRadius: rippleSize / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return (\n                  <Touchable\n                    key={route.key}\n                    borderless\n                    centered\n                    rippleColor={touchColor}\n                    onPress={() => this.handleTabPress(index)}\n                    testID={getTestID({ route })}\n                    accessibilityLabel={getAccessibilityLabel({ route })}\n                    accessibilityTraits={\n                      focused ? ['button', 'selected'] : 'button'\n                    }\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                    accessibilityStates={['selected']}\n                    style={styles.item}\n                  >\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <Text\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <Text\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </Text>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  </Touchable>\n                );\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}