{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Searchbar.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport IconButton from \"./IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\n\nvar Searchbar = function (_React$Component) {\n  _inherits(Searchbar, _React$Component);\n\n  function Searchbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Searchbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Searchbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClearPress = function () {\n      _this.clear();\n\n      _this.props.onChangeText && _this.props.onChangeText('');\n    };\n\n    return _this;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          onIconPress = _this$props.onIconPress,\n          icon = _this$props.icon,\n          value = _this$props.value,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          customIconColor = _this$props.iconColor,\n          clearIcon = _this$props.clearIcon,\n          inputStyle = _this$props.inputStyle,\n          rest = _objectWithoutProperties(_this$props, [\"placeholder\", \"onIconPress\", \"icon\", \"value\", \"theme\", \"style\", \"iconColor\", \"clearIcon\", \"inputStyle\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness,\n          dark = theme.dark,\n          fonts = theme.fonts;\n      var textColor = colors.text;\n      var font = fonts.regular;\n      var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      return React.createElement(Surface, {\n        style: [{\n          borderRadius: roundness,\n          elevation: 4\n        }, styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        }\n      }, React.createElement(IconButton, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onIconPress,\n        color: iconColor,\n        icon: icon || function (_ref) {\n          var size = _ref.size,\n              color = _ref.color;\n          return React.createElement(MaterialCommunityIcon, {\n            name: \"magnify\",\n            color: color,\n            size: size,\n            direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }), React.createElement(TextInput, _extends({\n        style: [styles.input, _objectSpread({\n          color: textColor\n        }, font), inputStyle],\n        placeholder: placeholder || '',\n        placeholderTextColor: colors.placeholder,\n        selectionColor: colors.primary,\n        underlineColorAndroid: \"transparent\",\n        returnKeyType: \"search\",\n        keyboardAppearance: dark ? 'dark' : 'light',\n        accessibilityTraits: \"search\",\n        accessibilityRole: \"search\",\n        ref: function ref(c) {\n          _this2.root = c;\n        },\n        value: value\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        }\n      })), React.createElement(IconButton, {\n        borderless: true,\n        disabled: !value,\n        color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n        rippleColor: rippleColor,\n        onPress: this.handleClearPress,\n        icon: clearIcon || function (_ref2) {\n          var size = _ref2.size,\n              color = _ref2.color;\n          return React.createElement(MaterialCommunityIcon, {\n            name: \"close\",\n            color: color,\n            size: size,\n            direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            }\n          });\n        },\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        }\n      }));\n    }\n  }]);\n\n  return Searchbar;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"mappings":"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","names":["React","color","IconButton","Surface","withTheme","MaterialCommunityIcon","Searchbar","handleClearPress","_this","clear","props","onChangeText","args","root","setNativeProps","isFocused","focus","blur","placeholder","onIconPress","icon","value","theme","style","customIconColor","iconColor","clearIcon","inputStyle","rest","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","__source","fileName","lineNumber","borderless","onPress","size","name","direction","I18nManager","isRTL","TextInput","input","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","accessibilityTraits","accessibilityRole","ref","_this2","c","disabled","accessibilityComponentType","Component","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     firstQuery: '',\n *   };\n *\n *   render() {\n *     const { firstQuery } = this.state;\n *     return (\n *       <Searchbar\n *         placeholder=\"Search\"\n *         onChangeText={query => { this.setState({ firstQuery: query }); }}\n *         value={firstQuery}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Searchbar extends React.Component<Props> {\n  private handleClearPress = () => {\n    this.clear();\n    this.props.onChangeText && this.props.onChangeText('');\n  };\n\n  private root: TextInput | undefined | null;\n\n  /**\n   * @internal\n   */ setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      placeholder,\n      onIconPress,\n      icon,\n      value,\n      theme,\n      style,\n      iconColor: customIconColor,\n      clearIcon,\n      inputStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark\n        ? textColor\n        : color(textColor)\n            .alpha(0.54)\n            .rgb()\n            .string());\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={c => {\n            this.root = c;\n          }}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={this.handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}