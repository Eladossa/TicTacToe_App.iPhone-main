{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Modal.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nvar DEFAULT_DURATION = 220;\n\nvar Modal = function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      opacity: new Animated.Value(_this.props.visible ? 1 : 0),\n      rendered: _this.props.visible\n    };\n\n    _this.handleBack = function () {\n      if (_this.props.dismissable) {\n        _this.hideModal();\n      }\n\n      return true;\n    };\n\n    _this.showModal = function () {\n      BackHandler.removeEventListener('hardwareBackPress', _this.handleBack);\n      BackHandler.addEventListener('hardwareBackPress', _this.handleBack);\n      var opacity = _this.state.opacity;\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: scale * DEFAULT_DURATION,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this.hideModal = function () {\n      BackHandler.removeEventListener('hardwareBackPress', _this.handleBack);\n      var opacity = _this.state.opacity;\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: scale * DEFAULT_DURATION,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (!finished) {\n          return;\n        }\n\n        if (_this.props.visible && _this.props.onDismiss) {\n          _this.props.onDismiss();\n        }\n\n        if (_this.props.visible) {\n          _this.showModal();\n        } else {\n          _this.setState({\n            rendered: false\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        if (this.props.visible) {\n          this.showModal();\n        } else {\n          this.hideModal();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          rendered = _this$state.rendered,\n          opacity = _this$state.opacity;\n      if (!rendered) return null;\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          theme = _this$props.theme,\n          contentContainerStyle = _this$props.contentContainerStyle;\n      var colors = theme.colors;\n      return React.createElement(Animated.View, {\n        pointerEvents: this.props.visible ? 'auto' : 'none',\n        accessibilityViewIsModal: true,\n        accessibilityLiveRegion: \"polite\",\n        style: StyleSheet.absoluteFill,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: dismissable ? this.hideModal : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.backdrop, {\n          backgroundColor: colors.backdrop,\n          opacity: opacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        }\n      })), React.createElement(SafeAreaView, {\n        style: styles.wrapper,\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }, React.createElement(Surface, {\n        style: [{\n          opacity: opacity\n        }, styles.content, contentContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        }\n      }, children)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.visible && !prevState.rendered) {\n        return {\n          rendered: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nModal.defaultProps = {\n  dismissable: true,\n  visible: false\n};\nexport default withTheme(Modal);\nvar styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    justifyContent: 'center'\n  }),\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaView","Surface","withTheme","DEFAULT_DURATION","Modal","state","opacity","Animated","Value","_this","props","visible","rendered","handleBack","dismissable","hideModal","showModal","BackHandler","removeEventListener","addEventListener","scale","theme","animation","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","finished","onDismiss","setState","prevProps","children","contentContainerStyle","colors","View","pointerEvents","accessibilityViewIsModal","accessibilityLiveRegion","style","StyleSheet","absoluteFill","__source","fileName","lineNumber","TouchableWithoutFeedback","onPress","undefined","styles","backdrop","backgroundColor","wrapper","content","nextProps","prevState","Component","defaultProps","create","flex","absoluteFillObject","justifyContent"],"sources":["Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\nconst DEFAULT_DURATION = 220;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showModal = () => this.setState({ visible: true });\n *   _hideModal = () => this.setState({ visible: false });\n *\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *       <Provider>\n *          <Portal>\n *            <Modal visible={visible} onDismiss={this._hideModal}>\n *              <Text>Example Modal</Text>\n *            </Modal>\n *            <Button\n *              style={{ marginTop: 30 }}\n *              onPress={this._showModal}\n *            >\n *              Show\n *            </Button>\n *          </Portal>\n *       </Provider>\n *     );\n *   }\n * }\n * ```\n */\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  private handleBack = () => {\n    if (this.props.dismissable) {\n      this.hideModal();\n    }\n    return true;\n  };\n\n  private showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const { rendered, opacity } = this.state;\n\n    if (!rendered) return null;\n\n    const { children, dismissable, theme, contentContainerStyle } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n      >\n        <TouchableWithoutFeedback\n          onPress={dismissable ? this.hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView style={styles.wrapper} pointerEvents=\"box-none\">\n          <Surface\n            style={\n              [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n                ViewStyle\n              >\n            }\n          >\n            {children}\n          </Surface>\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}