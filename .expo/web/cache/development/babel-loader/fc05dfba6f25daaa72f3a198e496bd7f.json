{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListItem.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListItem = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListItem).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: \"renderDescription\",\n    value: function renderDescription(descriptionColor, description) {\n      var _this$props = this.props,\n          descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,\n          descriptionStyle = _this$props.descriptionStyle,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines;\n      return typeof description === 'function' ? description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize\n      }) : React.createElement(Text, {\n        numberOfLines: descriptionNumberOfLines,\n        ellipsizeMode: descriptionEllipsizeMode,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, description);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          left = _this$props2.left,\n          right = _this$props2.right,\n          title = _this$props2.title,\n          description = _this$props2.description,\n          onPress = _this$props2.onPress,\n          theme = _this$props2.theme,\n          style = _this$props2.style,\n          titleStyle = _this$props2.titleStyle,\n          titleNumberOfLines = _this$props2.titleNumberOfLines,\n          titleEllipsizeMode = _this$props2.titleEllipsizeMode,\n          rest = _objectWithoutProperties(_this$props2, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"titleEllipsizeMode\"]);\n\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        style: [styles.container, style],\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        }\n      }), React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }, left ? left({\n        color: descriptionColor,\n        style: description ? styles.iconMarginLeft : _objectSpread({}, styles.iconMarginLeft, styles.marginVerticalNone)\n      }) : null, React.createElement(View, {\n        style: [styles.item, styles.content],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(Text, {\n        ellipsizeMode: titleEllipsizeMode,\n        numberOfLines: titleNumberOfLines,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }, title), description ? this.renderDescription(descriptionColor, description) : null), right ? right({\n        color: descriptionColor,\n        style: description ? styles.iconMarginRight : _objectSpread({}, styles.iconMarginRight, styles.marginVerticalNone)\n      }) : null));\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\nListItem.displayName = 'List.Item';\nListItem.defaultProps = {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"mappings":"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","names":["color","React","TouchableRipple","Text","withTheme","ListItem","descriptionColor","description","props","descriptionEllipsizeMode","descriptionStyle","descriptionNumberOfLines","ellipsizeMode","fontSize","styles","numberOfLines","style","__source","fileName","lineNumber","left","right","title","onPress","theme","titleStyle","titleNumberOfLines","titleEllipsizeMode","rest","titleColor","colors","text","alpha","rgb","string","container","View","row","iconMarginLeft","marginVerticalNone","item","content","renderDescription","iconMarginRight","Component","displayName","defaultProps","StyleSheet","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"sources":["ListItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}