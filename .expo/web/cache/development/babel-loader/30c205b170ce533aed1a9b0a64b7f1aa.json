{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/CheckboxIOS.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\n\nvar CheckboxIOS = function (_React$Component) {\n  _inherits(CheckboxIOS, _React$Component);\n\n  function CheckboxIOS() {\n    _classCallCheck(this, CheckboxIOS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CheckboxIOS).apply(this, arguments));\n  }\n\n  _createClass(CheckboxIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n      var rippleColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      }\n\n      var icon = indeterminate ? 'minus' : 'check';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        }\n      }), React.createElement(View, {\n        style: {\n          opacity: indeterminate || checked ? 1 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }, React.createElement(MaterialCommunityIcon, {\n        allowFontScaling: false,\n        name: icon,\n        size: 24,\n        color: checkedColor,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        }\n      })));\n    }\n  }]);\n\n  return CheckboxIOS;\n}(React.Component);\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS);\nexport { CheckboxIOS };","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;;IAyCMC,W;;;;;;;;;;;6BAGK;MAAA,kBAC+C,KAAKC,KADpD;MAAA,IACCC,MADD,eACCA,MADD;MAAA,IACSC,QADT,eACSA,QADT;MAAA,IACmBC,OADnB,eACmBA,OADnB;MAAA,IAC4BC,KAD5B,eAC4BA,KAD5B;MAAA,IACsCC,IADtC;;MAEP,IAAMC,OAAO,GAAGL,MAAM,KAAK,SAA3B;MACA,IAAMM,aAAa,GAAGN,MAAM,KAAK,eAAjC;MAEA,IAAMO,YAAY,GAAGN,QAAQ,GACzBE,KAAK,CAACK,MAANL,CAAaF,QADY,GAEzB,KAAKF,KAAL,CAAWL,KAAX,IAAoBS,KAAK,CAACK,MAANL,CAAaM,MAFrC;MAIA,IAAIC,WAAJ;;MAEA,IAAIT,QAAJ,EAAc;QACZS,WAAW,GAAGhB,KAAK,CAACS,KAAK,CAACK,MAANL,CAAaQ,IAAd,CAALjB,CACXkB,KADWlB,CACL,IADKA,EAEXmB,GAFWnB,GAGXoB,MAHWpB,EAAdgB;MADF,OAKO;QACLA,WAAW,GAAGhB,KAAK,CAACa,YAAD,CAALb,CACXqB,IADWrB,CACN,IADMA,EAEXmB,GAFWnB,GAGXoB,MAHWpB,EAAdgB;MAMF;;MAAA,IAAMM,IAAI,GAAGV,aAAa,GAAG,OAAH,GAAa,OAAvC;MAEA,OACEb,oBAACG,eAAD,eACMQ,IADN;QAEEa,UAAU,MAFZ;QAGEP,WAAW,EAAEA,WAHf;QAIER,OAAO,EAAEA,OAJX;QAKED,QAAQ,EAAEA,QALZ;QAMEiB,mBAAmB,EAAEjB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAN3D;QAOEkB,0BAA0B,EAAC,QAP7B;QAQEC,iBAAiB,EAAC,QARpB;QASEC,mBAAmB,EAAEpB,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkB,EATjD;QAUEqB,uBAAuB,EAAC,QAV1B;QAWEC,KAAK,EAAEC,MAAM,CAACC,SAXhB;QAAAC;UAAAC;UAAAC;QAAA;MAAA,IAaEnC,oBAACoC,IAAD;QAAMN,KAAK,EAAE;UAAEO,OAAO,EAAExB,aAAa,IAAID,OAAjBC,GAA2B,CAA3BA,GAA+B;QAA1C,CAAb;QAAAoB;UAAAC;UAAAC;QAAA;MAAA,GACEnC,oBAACE,qBAAD;QACEoC,gBAAgB,EAAE,KADpB;QAEEC,IAAI,EAAEhB,IAFR;QAGEiB,IAAI,EAAE,EAHR;QAIEvC,KAAK,EAAEa,YAJT;QAKE2B,SAAS,EAAEC,WAAW,CAACC,KAAZD,GAAoB,KAApBA,GAA4B,KALzC;QAAAT;UAAAC;UAAAC;QAAA;MAAA,EADF,CAbF,CADF;;;;;EA5BsBnC,KAAK,CAAC4C,S;;AAA1BvC,W,CACGwC,WADHxC,GACiB,cADjBA;AAwDN,IAAM0B,MAAM,GAAGe,UAAU,CAACC,MAAXD,CAAkB;EAC/Bd,SAAS,EAAE;IACTgB,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlBH,CAAf;AAOA,eAAe1C,SAAS,CAACC,WAAD,CAAxB;AAGA,SAASA,WAAT","names":["React","color","MaterialCommunityIcon","TouchableRipple","withTheme","CheckboxIOS","props","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","icon","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","style","styles","container","__source","fileName","lineNumber","View","opacity","allowFontScaling","name","size","direction","I18nManager","isRTL","Component","displayName","StyleSheet","create","borderRadius","padding"],"sources":["CheckboxIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, I18nManager } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}