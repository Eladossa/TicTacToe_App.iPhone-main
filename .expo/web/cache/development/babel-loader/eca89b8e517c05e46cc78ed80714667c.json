{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarIcon.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Icon from \"../Icon\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\nvar defaultSize = 64;\n\nvar Avatar = function (_React$Component) {\n  _inherits(Avatar, _React$Component);\n\n  function Avatar() {\n    _classCallCheck(this, Avatar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Avatar).apply(this, arguments));\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          _this$props$size = _this$props.size,\n          size = _this$props$size === void 0 ? defaultSize : _this$props$size,\n          style = _this$props.style,\n          theme = _this$props.theme;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.primary : _ref$backgroundColor,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n      var textColor = this.props.color || (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n      return React.createElement(View, {\n        style: [{\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor: backgroundColor\n        }, styles.container, restStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        }\n      }, React.createElement(Icon, {\n        source: icon,\n        color: textColor,\n        size: size * 0.6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }));\n    }\n  }]);\n\n  return Avatar;\n}(React.Component);\n\nAvatar.displayName = 'Avatar.Icon';\nAvatar.defaultProps = {\n  size: defaultSize\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(Avatar);","map":{"version":3,"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AACA,SAASC,SAAT;AACA,SAASC,KAAT;AAIA,IAAMC,WAAW,GAAG,EAApB;;IAyCMC,M;;;;;;;;;;;6BAOK;MAAA,kBAC4C,KAAKC,KADjD;MAAA,IACCC,IADD,eACCA,IADD;MAAA,mCACOC,IADP;MAAA,IACOA,IADP,iCACcJ,WADd;MAAA,IAC2BK,KAD3B,eAC2BA,KAD3B;MAAA,IACkCC,KADlC,eACkCA,KADlC;;MAAA,WAILC,UAAU,CAACC,OAAXD,CAAmBF,KAAnBE,KAA6B,EAJxB;MAAA,gCAGCE,eAHD;MAAA,IAGCA,eAHD,qCAGmBH,KAAK,CAACI,MAANJ,CAAaK,OAHhC;MAAA,IAG4CC,SAH5C;;MAKP,IAAMC,SAAS,GACb,KAAKX,KAAL,CAAWN,KAAX,KACCA,KAAK,CAACa,eAAD,CAALb,CAAuBkB,OAAvBlB,KAAmC,oBAAnCA,GAA0DG,KAD3D,CADF;MAIA,OACEJ,oBAACoB,IAAD;QACEV,KAAK,EAAE,CACL;UACEW,KAAK,EAAEZ,IADT;UAEEa,MAAM,EAAEb,IAFV;UAGEc,YAAY,EAAEd,IAAI,GAAG,CAHvB;UAIEK,eAAe,EAAfA;QAJF,CADK,EAOLU,MAAM,CAACC,SAPF,EAQLR,SARK,CADT;QAAAS;UAAAC;UAAAC;QAAA;MAAA,GAYE5B,oBAACE,IAAD;QAAM2B,MAAM,EAAErB,IAAd;QAAoBP,KAAK,EAAEiB,SAA3B;QAAsCT,IAAI,EAAEA,IAAI,GAAG,GAAnD;QAAAiB;UAAAC;UAAAC;QAAA;MAAA,EAZF,CADF;;;;;EAhBiB5B,KAAK,CAAC8B,S;;AAArBxB,M,CACGyB,WADHzB,GACiB,aADjBA;AAAAA,M,CAGG0B,YAHH1B,GAGkB;EACpBG,IAAI,EAAEJ;AADc,CAHlBC;AAmCN,IAAMkB,MAAM,GAAGZ,UAAU,CAACqB,MAAXrB,CAAkB;EAC/Ba,SAAS,EAAE;IACTS,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH;AADoB,CAAlBvB,CAAf;AAOA,eAAeT,SAAS,CAACG,MAAD,CAAxB","names":["React","color","Icon","withTheme","white","defaultSize","Avatar","props","icon","size","style","theme","StyleSheet","flatten","backgroundColor","colors","primary","restStyle","textColor","isLight","View","width","height","borderRadius","styles","container","__source","fileName","lineNumber","source","Component","displayName","defaultProps","create","justifyContent","alignItems"],"sources":["AvatarIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport { Theme } from '../../types';\nimport { IconSource } from './../Icon';\n\nconst defaultSize = 64;\n\ntype Props = {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nclass Avatar extends React.Component<Props> {\n  static displayName = 'Avatar.Icon';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const { icon, size = defaultSize, style, theme } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      this.props.color ||\n      (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        <Icon source={icon} color={textColor} size={size * 0.6} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Avatar);\n"]},"metadata":{},"sourceType":"module"}